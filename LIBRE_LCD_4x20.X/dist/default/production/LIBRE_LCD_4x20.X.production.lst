

Microchip MPLAB XC8 Assembler V2.10 build 88905656 
                                                                                               Sat Apr 25 21:06:34 2020

Microchip MPLAB XC8 C Compiler v2.10 (Free license) build 20190730164152 Og1 
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	flic
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     8                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
     9                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	text0,global,reloc=2,class=CODE,delta=1
    11                           	psect	text1,global,reloc=2,class=CODE,delta=1,group=2
    12                           	psect	text2,global,reloc=2,class=CODE,delta=1
    13                           	psect	text3,global,reloc=2,class=CODE,delta=1
    14                           	psect	text4,global,reloc=2,class=CODE,delta=1
    15                           	psect	text5,global,reloc=2,class=CODE,delta=1
    16                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=2
    17                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=2
    18                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=2
    19                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=2
    20                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=2
    21                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=1
    22                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=1
    23                           	psect	text13,global,reloc=2,class=CODE,delta=1
    24                           	psect	text14,global,reloc=2,class=CODE,delta=1
    25                           	psect	text15,global,reloc=2,class=CODE,delta=1
    26                           	psect	text16,global,reloc=2,class=CODE,delta=1
    27                           	psect	text17,global,reloc=2,class=CODE,delta=1
    28                           	psect	text18,global,reloc=2,class=CODE,delta=1
    29                           	psect	text19,global,reloc=2,class=CODE,delta=1
    30                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    31                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    32  0000                     
    33                           ; Version 2.10
    34                           ; Generated 31/07/2019 GMT
    35                           ; 
    36                           ; Copyright Â© 2019, Microchip Technology Inc. and its subsidiaries ("Microchip")
    37                           ; All rights reserved.
    38                           ; 
    39                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    40                           ; 
    41                           ; Redistribution and use in source and binary forms, with or without modification, are
    42                           ; permitted provided that the following conditions are met:
    43                           ; 
    44                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    45                           ;        conditions and the following disclaimer.
    46                           ; 
    47                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    48                           ;        of conditions and the following disclaimer in the documentation and/or other
    49                           ;        materials provided with the distribution.
    50                           ; 
    51                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    52                           ;        software without specific prior written permission.
    53                           ; 
    54                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    55                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    56                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    57                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    58                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    59                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    60                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    61                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    62                           ; 
    63                           ; 
    64                           ; Code-generator required, PIC18F4550 Definitions
    65                           ; 
    66                           ; SFR Addresses
    67  0000                     _ADCON1	set	4033
    68  0000                     _TRISDbits	set	3989
    69  0000                     _PORTDbits	set	3971
    70                           
    71                           	psect	smallconst
    72  000800                     __psmallconst:
    73                           	opt callstack 0
    74  000800  00                 	db	0
    75  000801                     STR_2:
    76  000801  54                 	db	84	;'T'
    77  000802  65                 	db	101	;'e'
    78  000803  6D                 	db	109	;'m'
    79  000804  70                 	db	112	;'p'
    80  000805  3A                 	db	58	;':'
    81  000806  20                 	db	32
    82  000807  25                 	db	37
    83  000808  64                 	db	100	;'d'
    84  000809  00                 	db	0
    85  00080A                     STR_1:
    86  00080A  54                 	db	84	;'T'
    87  00080B  65                 	db	101	;'e'
    88  00080C  6D                 	db	109	;'m'
    89  00080D  70                 	db	112	;'p'
    90  00080E  3A                 	db	58	;':'
    91  00080F  20                 	db	32
    92  000810  00                 	db	0
    93                           
    94                           ; #config settings
    95  000811  00                 	db	0	; dummy byte at the end
    96  0000                     
    97                           	psect	cinit
    98  001698                     __pcinit:
    99                           	opt callstack 0
   100  001698                     start_initialization:
   101                           	opt callstack 0
   102  001698                     __initialization:
   103                           	opt callstack 0
   104                           
   105                           ; Clear objects allocated to BANK0 (62 bytes)
   106  001698  EE00  F060         	lfsr	0,__pbssBANK0
   107  00169C  0E3E               	movlw	62
   108  00169E                     clear_0:
   109  00169E  6AEE               	clrf	postinc0,c
   110  0016A0  06E8               	decf	wreg,f,c
   111  0016A2  E1FD               	bnz	clear_0
   112  0016A4                     end_of_initialization:
   113                           	opt callstack 0
   114  0016A4                     __end_of__initialization:
   115                           	opt callstack 0
   116  0016A4  0E00               	movlw	low (__Lmediumconst shr (0+16))
   117  0016A6  6EF8               	movwf	tblptru,c
   118  0016A8  0100               	movlb	0
   119  0016AA  EFC9  F009         	goto	_main	;jump to C main() function
   120                           
   121                           	psect	bssBANK0
   122  000060                     __pbssBANK0:
   123                           	opt callstack 0
   124  000060                     _nout:
   125                           	opt callstack 0
   126  000060                     	ds	2
   127  000062                     _width:
   128                           	opt callstack 0
   129  000062                     	ds	2
   130  000064                     _prec:
   131                           	opt callstack 0
   132  000064                     	ds	2
   133  000066                     _flags:
   134                           	opt callstack 0
   135  000066                     	ds	2
   136  000068                     _contador:
   137                           	opt callstack 0
   138  000068                     	ds	2
   139  00006A                     _dbuf:
   140                           	opt callstack 0
   141  00006A                     	ds	32
   142  00008A                     _aux:
   143                           	opt callstack 0
   144  00008A                     	ds	20
   145                           
   146                           	psect	cstackBANK0
   147  00009E                     __pcstackBANK0:
   148                           	opt callstack 0
   149  00009E                     	ds	2
   150  0000A0                     sprintf@ap:
   151                           	opt callstack 0
   152                           
   153                           ; 2 bytes @ 0x2
   154  0000A0                     	ds	2
   155  0000A2                     sprintf@f:
   156                           	opt callstack 0
   157                           
   158                           ; 6 bytes @ 0x4
   159  0000A2                     	ds	6
   160                           
   161                           	psect	cstackCOMRAM
   162  000001                     __pcstackCOMRAM:
   163                           	opt callstack 0
   164  000001                     ?_set_Cursor:
   165                           	opt callstack 0
   166  000001                     ?_strlen:
   167                           	opt callstack 0
   168  000001                     ?___aodiv:
   169                           	opt callstack 0
   170  000001                     ?___aomod:
   171                           	opt callstack 0
   172  000001                     set_valor@valor_comando:
   173                           	opt callstack 0
   174  000001                     set_Cursor@y:
   175                           	opt callstack 0
   176  000001                     fputc@c:
   177                           	opt callstack 0
   178  000001                     strlen@s:
   179                           	opt callstack 0
   180  000001                     ___aodiv@dividend:
   181                           	opt callstack 0
   182  000001                     ___aomod@dividend:
   183                           	opt callstack 0
   184                           
   185                           ; 8 bytes @ 0x0
   186  000001                     	ds	2
   187  000003                     ??_set_valor:
   188  000003                     set_Cursor@x:
   189                           	opt callstack 0
   190  000003                     fputc@fp:
   191                           	opt callstack 0
   192  000003                     strlen@a:
   193                           	opt callstack 0
   194                           
   195                           ; 2 bytes @ 0x2
   196  000003                     	ds	2
   197  000005                     ??_set_Cursor:
   198  000005                     ??_fputc:
   199  000005                     ??_Lcd_Init:
   200  000005                     ??_Lcd_Chr_Cp:
   201  000005                     ??_Lcd_Cmd:
   202                           
   203                           ; 1 bytes @ 0x4
   204  000005                     	ds	2
   205  000007                     set_Cursor@data:
   206                           	opt callstack 0
   207                           
   208                           ; 2 bytes @ 0x6
   209  000007                     	ds	2
   210  000009                     Lcd_Chr_Cp@valor_palabra:
   211                           	opt callstack 0
   212  000009                     Lcd_Cmd@valor_palabra:
   213                           	opt callstack 0
   214  000009                     ___aodiv@divisor:
   215                           	opt callstack 0
   216  000009                     ___aomod@divisor:
   217                           	opt callstack 0
   218                           
   219                           ; 8 bytes @ 0x8
   220  000009                     	ds	1
   221  00000A                     fputs@s:
   222                           	opt callstack 0
   223                           
   224                           ; 2 bytes @ 0x9
   225  00000A                     	ds	1
   226  00000B                     Lcd_Chr_Cp@mensaje:
   227                           	opt callstack 0
   228  00000B                     Lcd_Cmd@comando:
   229                           	opt callstack 0
   230                           
   231                           ; 1 bytes @ 0xA
   232  00000B                     	ds	1
   233  00000C                     Lcd_Out@y:
   234                           	opt callstack 0
   235  00000C                     fputs@fp:
   236                           	opt callstack 0
   237                           
   238                           ; 2 bytes @ 0xB
   239  00000C                     	ds	2
   240  00000E                     fputs@c:
   241                           	opt callstack 0
   242  00000E                     Lcd_Out@x:
   243                           	opt callstack 0
   244                           
   245                           ; 2 bytes @ 0xD
   246  00000E                     	ds	1
   247  00000F                     fputs@i:
   248                           	opt callstack 0
   249                           
   250                           ; 2 bytes @ 0xE
   251  00000F                     	ds	1
   252  000010                     Lcd_Out@mensaje:
   253                           	opt callstack 0
   254                           
   255                           ; 2 bytes @ 0xF
   256  000010                     	ds	1
   257  000011                     ?_pad:
   258                           	opt callstack 0
   259  000011                     ___aodiv@counter:
   260                           	opt callstack 0
   261  000011                     ___aomod@counter:
   262                           	opt callstack 0
   263  000011                     pad@fp:
   264                           	opt callstack 0
   265                           
   266                           ; 2 bytes @ 0x10
   267  000011                     	ds	1
   268  000012                     ___aodiv@sign:
   269                           	opt callstack 0
   270  000012                     ___aomod@sign:
   271                           	opt callstack 0
   272  000012                     Lcd_Out@cursor:
   273                           	opt callstack 0
   274                           
   275                           ; 2 bytes @ 0x11
   276  000012                     	ds	1
   277  000013                     ?_abs:
   278                           	opt callstack 0
   279  000013                     pad@buf:
   280                           	opt callstack 0
   281  000013                     abs@a:
   282                           	opt callstack 0
   283  000013                     ___aodiv@quotient:
   284                           	opt callstack 0
   285                           
   286                           ; 8 bytes @ 0x12
   287  000013                     	ds	2
   288  000015                     ??_abs:
   289  000015                     pad@p:
   290                           	opt callstack 0
   291                           
   292                           ; 2 bytes @ 0x14
   293  000015                     	ds	2
   294  000017                     ??_pad:
   295                           
   296                           ; 1 bytes @ 0x16
   297  000017                     	ds	1
   298  000018                     pad@i:
   299                           	opt callstack 0
   300                           
   301                           ; 2 bytes @ 0x17
   302  000018                     	ds	2
   303  00001A                     pad@w:
   304                           	opt callstack 0
   305                           
   306                           ; 2 bytes @ 0x19
   307  00001A                     	ds	2
   308  00001C                     ?_dtoa:
   309                           	opt callstack 0
   310  00001C                     dtoa@fp:
   311                           	opt callstack 0
   312                           
   313                           ; 2 bytes @ 0x1B
   314  00001C                     	ds	2
   315  00001E                     dtoa@d:
   316                           	opt callstack 0
   317                           
   318                           ; 8 bytes @ 0x1D
   319  00001E                     	ds	8
   320  000026                     ??_dtoa:
   321                           
   322                           ; 1 bytes @ 0x25
   323  000026                     	ds	8
   324  00002E                     _dtoa$237:
   325                           	opt callstack 0
   326                           
   327                           ; 2 bytes @ 0x2D
   328  00002E                     	ds	2
   329  000030                     dtoa@p:
   330                           	opt callstack 0
   331                           
   332                           ; 2 bytes @ 0x2F
   333  000030                     	ds	2
   334  000032                     dtoa@w:
   335                           	opt callstack 0
   336                           
   337                           ; 2 bytes @ 0x31
   338  000032                     	ds	2
   339  000034                     dtoa@s:
   340                           	opt callstack 0
   341                           
   342                           ; 2 bytes @ 0x33
   343  000034                     	ds	2
   344  000036                     dtoa@n:
   345                           	opt callstack 0
   346                           
   347                           ; 8 bytes @ 0x35
   348  000036                     	ds	8
   349  00003E                     dtoa@i:
   350                           	opt callstack 0
   351                           
   352                           ; 2 bytes @ 0x3D
   353  00003E                     	ds	2
   354  000040                     ?_vfpfcnvrt:
   355                           	opt callstack 0
   356  000040                     vfpfcnvrt@fp:
   357                           	opt callstack 0
   358                           
   359                           ; 2 bytes @ 0x3F
   360  000040                     	ds	2
   361  000042                     vfpfcnvrt@fmt:
   362                           	opt callstack 0
   363                           
   364                           ; 2 bytes @ 0x41
   365  000042                     	ds	2
   366  000044                     vfpfcnvrt@ap:
   367                           	opt callstack 0
   368                           
   369                           ; 2 bytes @ 0x43
   370  000044                     	ds	2
   371  000046                     ??_vfpfcnvrt:
   372                           
   373                           ; 1 bytes @ 0x45
   374  000046                     	ds	2
   375  000048                     vfpfcnvrt@ll:
   376                           	opt callstack 0
   377                           
   378                           ; 8 bytes @ 0x47
   379  000048                     	ds	8
   380  000050                     ?_vfprintf:
   381                           	opt callstack 0
   382  000050                     vfprintf@fp:
   383                           	opt callstack 0
   384                           
   385                           ; 2 bytes @ 0x4F
   386  000050                     	ds	2
   387  000052                     vfprintf@fmt:
   388                           	opt callstack 0
   389                           
   390                           ; 2 bytes @ 0x51
   391  000052                     	ds	2
   392  000054                     vfprintf@ap:
   393                           	opt callstack 0
   394                           
   395                           ; 2 bytes @ 0x53
   396  000054                     	ds	2
   397  000056                     vfprintf@cfmt:
   398                           	opt callstack 0
   399                           
   400                           ; 2 bytes @ 0x55
   401  000056                     	ds	2
   402  000058                     ?_sprintf:
   403                           	opt callstack 0
   404  000058                     sprintf@s:
   405                           	opt callstack 0
   406                           
   407                           ; 2 bytes @ 0x57
   408  000058                     	ds	2
   409  00005A                     sprintf@fmt:
   410                           	opt callstack 0
   411                           
   412                           ; 2 bytes @ 0x59
   413  00005A                     	ds	4
   414  00005E                     ??_main:
   415                           
   416                           ; 1 bytes @ 0x5D
   417  00005E                     	ds	2
   418                           
   419 ;;
   420 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   421 ;;
   422 ;; *************** function _main *****************
   423 ;; Defined at:
   424 ;;		line 11 in file "main.c"
   425 ;; Parameters:    Size  Location     Type
   426 ;;		None
   427 ;; Auto vars:     Size  Location     Type
   428 ;;		None
   429 ;; Return value:  Size  Location     Type
   430 ;;                  1    wreg      void 
   431 ;; Registers used:
   432 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   433 ;; Tracked objects:
   434 ;;		On entry : 0/0
   435 ;;		On exit  : 0/0
   436 ;;		Unchanged: 0/0
   437 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   438 ;;      Params:         0       0       0       0       0       0       0       0       0
   439 ;;      Locals:         0       0       0       0       0       0       0       0       0
   440 ;;      Temps:          2       0       0       0       0       0       0       0       0
   441 ;;      Totals:         2       0       0       0       0       0       0       0       0
   442 ;;Total ram usage:        2 bytes
   443 ;; Hardware stack levels required when called:    8
   444 ;; This function calls:
   445 ;;		_Lcd_Cmd
   446 ;;		_Lcd_Init
   447 ;;		_Lcd_Out
   448 ;;		_sprintf
   449 ;; This function is called by:
   450 ;;		Startup code after reset
   451 ;; This function uses a non-reentrant model
   452 ;;
   453                           
   454                           	psect	text0
   455  001392                     __ptext0:
   456                           	opt callstack 0
   457  001392                     _main:
   458                           	opt callstack 23
   459  001392                     
   460                           ;main.c: 12:     ADCON1 = 0x0F;
   461  001392  0E0F               	movlw	15
   462  001394  6EC1               	movwf	193,c	;volatile
   463  001396                     
   464                           ;main.c: 13:     Lcd_Init();
   465  001396  EC92  F008         	call	_Lcd_Init	;wreg free
   466  00139A                     
   467                           ;main.c: 14:     Lcd_Cmd(12);
   468  00139A  0E0C               	movlw	12
   469  00139C  ECEC  F008         	call	_Lcd_Cmd
   470  0013A0                     
   471                           ;main.c: 15:     Lcd_Cmd(1);
   472  0013A0  0E01               	movlw	1
   473  0013A2  ECEC  F008         	call	_Lcd_Cmd
   474  0013A6                     
   475                           ;main.c: 16:     Lcd_Out(1,1,"Temp: ");
   476  0013A6  0E00               	movlw	0
   477  0013A8  6E0D               	movwf	(Lcd_Out@y+1)^0,c
   478  0013AA  0E01               	movlw	1
   479  0013AC  6E0C               	movwf	Lcd_Out@y^0,c
   480  0013AE  0E00               	movlw	0
   481  0013B0  6E0F               	movwf	(Lcd_Out@x+1)^0,c
   482  0013B2  0E01               	movlw	1
   483  0013B4  6E0E               	movwf	Lcd_Out@x^0,c
   484  0013B6  0E0A               	movlw	low STR_1
   485  0013B8  6E10               	movwf	Lcd_Out@mensaje^0,c
   486  0013BA  0E08               	movlw	high STR_1
   487  0013BC  6E11               	movwf	(Lcd_Out@mensaje+1)^0,c
   488  0013BE  EC55  F00A         	call	_Lcd_Out	;wreg free
   489  0013C2                     l1593:
   490                           
   491                           ;main.c: 19:         sprintf(aux,"Temp: %d",contador);
   492  0013C2  0E8A               	movlw	low _aux
   493  0013C4  6E58               	movwf	sprintf@s^0,c
   494  0013C6  0E00               	movlw	high _aux
   495  0013C8  6E59               	movwf	(sprintf@s+1)^0,c
   496  0013CA  0E01               	movlw	low STR_2
   497  0013CC  6E5A               	movwf	sprintf@fmt^0,c
   498  0013CE  0E08               	movlw	high STR_2
   499  0013D0  6E5B               	movwf	(sprintf@fmt+1)^0,c
   500  0013D2  C068  F05C         	movff	_contador,?_sprintf+4
   501  0013D6  C069  F05D         	movff	_contador+1,?_sprintf+5
   502  0013DA  ECC6  F00A         	call	_sprintf	;wreg free
   503  0013DE                     
   504                           ;main.c: 20:         Lcd_Out(1,1,aux);
   505  0013DE  0E00               	movlw	0
   506  0013E0  6E0D               	movwf	(Lcd_Out@y+1)^0,c
   507  0013E2  0E01               	movlw	1
   508  0013E4  6E0C               	movwf	Lcd_Out@y^0,c
   509  0013E6  0E00               	movlw	0
   510  0013E8  6E0F               	movwf	(Lcd_Out@x+1)^0,c
   511  0013EA  0E01               	movlw	1
   512  0013EC  6E0E               	movwf	Lcd_Out@x^0,c
   513  0013EE  0E8A               	movlw	low _aux
   514  0013F0  6E10               	movwf	Lcd_Out@mensaje^0,c
   515  0013F2  0E00               	movlw	high _aux
   516  0013F4  6E11               	movwf	(Lcd_Out@mensaje+1)^0,c
   517  0013F6  EC55  F00A         	call	_Lcd_Out	;wreg free
   518  0013FA                     
   519                           ;main.c: 21:         contador++;
   520  0013FA  0100               	movlb	0	; () banked
   521  0013FC  4B68               	infsnz	_contador& (0+255),f,b
   522  0013FE  2B69               	incf	(_contador+1)& (0+255),f,b
   523  001400                     
   524                           ; BSR set to: 0
   525                           ;main.c: 22:         _delay((unsigned long)((200)*(4000000L/4000.0)));
   526  001400  0E02               	movlw	2
   527  001402  6E5F               	movwf	(??_main+1)^0,c
   528  001404  0E04               	movlw	4
   529  001406  6E5E               	movwf	??_main^0,c
   530  001408  0EBA               	movlw	186
   531  00140A                     u1017:
   532  00140A  2EE8               	decfsz	wreg,f,c
   533  00140C  D7FE               	bra	u1017
   534  00140E  2E5E               	decfsz	??_main^0,f,c
   535  001410  D7FC               	bra	u1017
   536  001412  2E5F               	decfsz	(??_main+1)^0,f,c
   537  001414  D7FA               	bra	u1017
   538  001416  D000               	nop2	
   539  001418  EFE1  F009         	goto	l1593
   540  00141C  EF00  F000         	goto	start
   541  001420                     __end_of_main:
   542                           	opt callstack 0
   543                           
   544 ;; *************** function _sprintf *****************
   545 ;; Defined at:
   546 ;;		line 9 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\nf_sprintf.c"
   547 ;; Parameters:    Size  Location     Type
   548 ;;  s               2   87[COMRAM] PTR unsigned char 
   549 ;;		 -> aux(20), 
   550 ;;  fmt             2   89[COMRAM] PTR const unsigned char 
   551 ;;		 -> STR_2(9), 
   552 ;; Auto vars:     Size  Location     Type
   553 ;;  f               6    4[BANK0 ] struct _IO_FILE
   554 ;;  ap              2    2[BANK0 ] PTR void [1]
   555 ;;		 -> ?_sprintf(2), 
   556 ;;  ret             2    0        int 
   557 ;; Return value:  Size  Location     Type
   558 ;;                  2   87[COMRAM] int 
   559 ;; Registers used:
   560 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   561 ;; Tracked objects:
   562 ;;		On entry : 0/0
   563 ;;		On exit  : 0/0
   564 ;;		Unchanged: 0/0
   565 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   566 ;;      Params:         6       0       0       0       0       0       0       0       0
   567 ;;      Locals:         0      10       0       0       0       0       0       0       0
   568 ;;      Temps:          0       0       0       0       0       0       0       0       0
   569 ;;      Totals:         6      10       0       0       0       0       0       0       0
   570 ;;Total ram usage:       16 bytes
   571 ;; Hardware stack levels used:    1
   572 ;; Hardware stack levels required when called:    7
   573 ;; This function calls:
   574 ;;		_vfprintf
   575 ;; This function is called by:
   576 ;;		_main
   577 ;; This function uses a non-reentrant model
   578 ;;
   579                           
   580                           	psect	text1
   581  00158C                     __ptext1:
   582                           	opt callstack 0
   583  00158C                     _sprintf:
   584                           	opt callstack 23
   585  00158C  0E5C               	movlw	low (?_sprintf+4)
   586  00158E  0100               	movlb	0	; () banked
   587  001590  6FA0               	movwf	sprintf@ap& (0+255),b
   588  001592  0E00               	movlw	high (?_sprintf+4)
   589  001594  6FA1               	movwf	(sprintf@ap+1)& (0+255),b
   590  001596  C058  F0A2         	movff	sprintf@s,sprintf@f
   591  00159A  C059  F0A3         	movff	sprintf@s+1,sprintf@f+1
   592  00159E                     
   593                           ; BSR set to: 0
   594  00159E  0E00               	movlw	0
   595  0015A0  6FA5               	movwf	(sprintf@f+3)& (0+255),b
   596  0015A2  0E00               	movlw	0
   597  0015A4  6FA4               	movwf	(sprintf@f+2)& (0+255),b
   598  0015A6                     
   599                           ; BSR set to: 0
   600  0015A6  0E00               	movlw	0
   601  0015A8  6FA7               	movwf	(sprintf@f+5)& (0+255),b
   602  0015AA  0E00               	movlw	0
   603  0015AC  6FA6               	movwf	(sprintf@f+4)& (0+255),b
   604  0015AE                     
   605                           ; BSR set to: 0
   606  0015AE  0EA2               	movlw	low sprintf@f
   607  0015B0  6E50               	movwf	vfprintf@fp^0,c
   608  0015B2  0E00               	movlw	high sprintf@f
   609  0015B4  6E51               	movwf	(vfprintf@fp+1)^0,c
   610  0015B6  C05A  F052         	movff	sprintf@fmt,vfprintf@fmt
   611  0015BA  C05B  F053         	movff	sprintf@fmt+1,vfprintf@fmt+1
   612  0015BE  0EA0               	movlw	low sprintf@ap
   613  0015C0  6E54               	movwf	vfprintf@ap^0,c
   614  0015C2  0E00               	movlw	high sprintf@ap
   615  0015C4  6E55               	movwf	(vfprintf@ap+1)^0,c
   616  0015C6  EC95  F00A         	call	_vfprintf	;wreg free
   617  0015CA  0100               	movlb	0	; () banked
   618  0015CC  51A4               	movf	(sprintf@f+2)& (0+255),w,b
   619  0015CE  2458               	addwf	sprintf@s^0,w,c
   620  0015D0  6ED9               	movwf	fsr2l,c
   621  0015D2  51A5               	movf	(sprintf@f+3)& (0+255),w,b
   622  0015D4  2059               	addwfc	(sprintf@s+1)^0,w,c
   623  0015D6  6EDA               	movwf	fsr2h,c
   624  0015D8  0E00               	movlw	0
   625  0015DA  6EDF               	movwf	indf2,c
   626  0015DC                     
   627                           ; BSR set to: 0
   628  0015DC  0012               	return		;funcret
   629  0015DE                     __end_of_sprintf:
   630                           	opt callstack 0
   631                           
   632 ;; *************** function _vfprintf *****************
   633 ;; Defined at:
   634 ;;		line 1368 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c"
   635 ;; Parameters:    Size  Location     Type
   636 ;;  fp              2   79[COMRAM] PTR struct _IO_FILE
   637 ;;		 -> sprintf@f(6), 
   638 ;;  fmt             2   81[COMRAM] PTR const unsigned char 
   639 ;;		 -> STR_2(9), 
   640 ;;  ap              2   83[COMRAM] PTR PTR void 
   641 ;;		 -> sprintf@ap(2), 
   642 ;; Auto vars:     Size  Location     Type
   643 ;;  cfmt            2   85[COMRAM] PTR unsigned char 
   644 ;;		 -> STR_2(9), 
   645 ;; Return value:  Size  Location     Type
   646 ;;                  2   79[COMRAM] int 
   647 ;; Registers used:
   648 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   649 ;; Tracked objects:
   650 ;;		On entry : 0/0
   651 ;;		On exit  : 0/0
   652 ;;		Unchanged: 0/0
   653 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   654 ;;      Params:         6       0       0       0       0       0       0       0       0
   655 ;;      Locals:         2       0       0       0       0       0       0       0       0
   656 ;;      Temps:          0       0       0       0       0       0       0       0       0
   657 ;;      Totals:         8       0       0       0       0       0       0       0       0
   658 ;;Total ram usage:        8 bytes
   659 ;; Hardware stack levels used:    1
   660 ;; Hardware stack levels required when called:    6
   661 ;; This function calls:
   662 ;;		_vfpfcnvrt
   663 ;; This function is called by:
   664 ;;		_sprintf
   665 ;; This function uses a non-reentrant model
   666 ;;
   667                           
   668                           	psect	text2
   669  00152A                     __ptext2:
   670                           	opt callstack 0
   671  00152A                     _vfprintf:
   672                           	opt callstack 23
   673  00152A                     
   674                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1368: int v
      +                          fprintf(FILE *fp, const char *fmt, va_list ap);C:\Program Files (x86)\Microchip\xc8\v2.1
      +                          0\pic\sources\c99\common\doprnt.c: 1369: {;C:\Program Files (x86)\Microchip\xc8\v2.10\pi
      +                          c\sources\c99\common\doprnt.c: 1371:     char *cfmt;;C:\Program Files (x86)\Microchip\xc
      +                          8\v2.10\pic\sources\c99\common\doprnt.c: 1373:     cfmt = (char *)fmt;
   675  00152A  C052  F056         	movff	vfprintf@fmt,vfprintf@cfmt
   676  00152E  C053  F057         	movff	vfprintf@fmt+1,vfprintf@cfmt+1
   677  001532                     
   678                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1374:     n
      +                          out = 0;
   679  001532  0E00               	movlw	0
   680  001534  0100               	movlb	0	; () banked
   681  001536  6F61               	movwf	(_nout+1)& (0+255),b
   682  001538  0E00               	movlw	0
   683  00153A  6F60               	movwf	_nout& (0+255),b
   684                           
   685                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1375:     w
      +                          hile (*cfmt) {
   686  00153C  EFB3  F00A         	goto	l1537
   687  001540                     l1535:
   688                           
   689                           ; BSR set to: 0
   690                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1376:      
      +                             nout += vfpfcnvrt(fp, &cfmt, ap);
   691  001540  C050  F040         	movff	vfprintf@fp,vfpfcnvrt@fp
   692  001544  C051  F041         	movff	vfprintf@fp+1,vfpfcnvrt@fp+1
   693  001548  0E56               	movlw	low vfprintf@cfmt
   694  00154A  6E42               	movwf	vfpfcnvrt@fmt^0,c
   695  00154C  0E00               	movlw	high vfprintf@cfmt
   696  00154E  6E43               	movwf	(vfpfcnvrt@fmt+1)^0,c
   697  001550  C054  F044         	movff	vfprintf@ap,vfpfcnvrt@ap
   698  001554  C055  F045         	movff	vfprintf@ap+1,vfpfcnvrt@ap+1
   699  001558  EC7A  F005         	call	_vfpfcnvrt	;wreg free
   700  00155C  5040               	movf	?_vfpfcnvrt^0,w,c
   701  00155E  0100               	movlb	0	; () banked
   702  001560  2760               	addwf	_nout& (0+255),f,b
   703  001562  5041               	movf	(?_vfpfcnvrt+1)^0,w,c
   704  001564  2361               	addwfc	(_nout+1)& (0+255),f,b
   705  001566                     l1537:
   706                           
   707                           ; BSR set to: 0
   708                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1375:     w
      +                          hile (*cfmt) {
   709  001566  C056  FFF6         	movff	vfprintf@cfmt,tblptrl
   710  00156A  C057  FFF7         	movff	vfprintf@cfmt+1,tblptrh
   711  00156E                     	if	0	;tblptru may be non-zero
   712  00156E                     	endif
   713  00156E                     	if	0	;tblptru may be non-zero
   714  00156E                     	endif
   715  00156E  0008               	tblrd		*
   716  001570  50F5               	movf	tablat,w,c
   717  001572  0900               	iorlw	0
   718  001574  A4D8               	btfss	status,2,c
   719  001576  EFBF  F00A         	goto	u961
   720  00157A  EFC1  F00A         	goto	u960
   721  00157E                     u961:
   722  00157E  EFA0  F00A         	goto	l1535
   723  001582                     u960:
   724  001582                     
   725                           ; BSR set to: 0
   726                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1378:     r
      +                          eturn nout;
   727  001582  C060  F050         	movff	_nout,?_vfprintf
   728  001586  C061  F051         	movff	_nout+1,?_vfprintf+1
   729  00158A                     
   730                           ; BSR set to: 0
   731  00158A  0012               	return		;funcret
   732  00158C                     __end_of_vfprintf:
   733                           	opt callstack 0
   734                           
   735 ;; *************** function _vfpfcnvrt *****************
   736 ;; Defined at:
   737 ;;		line 670 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c"
   738 ;; Parameters:    Size  Location     Type
   739 ;;  fp              2   63[COMRAM] PTR struct _IO_FILE
   740 ;;		 -> sprintf@f(6), 
   741 ;;  fmt             2   65[COMRAM] PTR PTR unsigned char 
   742 ;;		 -> vfprintf@cfmt(2), 
   743 ;;  ap              2   67[COMRAM] PTR PTR void 
   744 ;;		 -> sprintf@ap(2), 
   745 ;; Auto vars:     Size  Location     Type
   746 ;;  ll              8   71[COMRAM] long long 
   747 ;;  llu             8    0        unsigned long long 
   748 ;;  f               4    0        unsigned long long 
   749 ;;  vp              3    0        PTR void 
   750 ;;  ct              3    0        unsigned char [3]
   751 ;;  cp              3    0        PTR unsigned char 
   752 ;;  i               2    0        int 
   753 ;;  done            2    0        int 
   754 ;;  c               1    0        unsigned char 
   755 ;; Return value:  Size  Location     Type
   756 ;;                  2   63[COMRAM] int 
   757 ;; Registers used:
   758 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   759 ;; Tracked objects:
   760 ;;		On entry : 0/0
   761 ;;		On exit  : 0/0
   762 ;;		Unchanged: 0/0
   763 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   764 ;;      Params:         6       0       0       0       0       0       0       0       0
   765 ;;      Locals:         8       0       0       0       0       0       0       0       0
   766 ;;      Temps:          2       0       0       0       0       0       0       0       0
   767 ;;      Totals:        16       0       0       0       0       0       0       0       0
   768 ;;Total ram usage:       16 bytes
   769 ;; Hardware stack levels used:    1
   770 ;; Hardware stack levels required when called:    5
   771 ;; This function calls:
   772 ;;		_dtoa
   773 ;;		_fputc
   774 ;; This function is called by:
   775 ;;		_vfprintf
   776 ;; This function uses a non-reentrant model
   777 ;;
   778                           
   779                           	psect	text3
   780  000AF4                     __ptext3:
   781                           	opt callstack 0
   782  000AF4                     _vfpfcnvrt:
   783                           	opt callstack 23
   784  000AF4                     
   785                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 670: static
      +                           int vfpfcnvrt(FILE *fp, char *fmt[], va_list ap);C:\Program Files (x86)\Microchip\xc8\v
      +                          2.10\pic\sources\c99\common\doprnt.c: 671: {;C:\Program Files (x86)\Microchip\xc8\v2.10\
      +                          pic\sources\c99\common\doprnt.c: 672:     char c, *cp, ct[3];;C:\Program Files (x86)\Mic
      +                          rochip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 673:     int done, i;;C:\Program Files
      +                           (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 674:     long long ll;
   786  000AF4  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   787  000AF8  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   788  000AFC  CFDE FFF6          	movff	postinc2,tblptrl
   789  000B00  CFDD FFF7          	movff	postdec2,tblptrh
   790  000B04                     	if	0	;tblptru may be non-zero
   791  000B04                     	endif
   792  000B04                     	if	0	;tblptru may be non-zero
   793  000B04                     	endif
   794  000B04  0008               	tblrd		*
   795  000B06  50F5               	movf	tablat,w,c
   796  000B08  0A25               	xorlw	37
   797  000B0A  A4D8               	btfss	status,2,c
   798  000B0C  EF8A  F005         	goto	u901
   799  000B10  EF8C  F005         	goto	u900
   800  000B14                     u901:
   801  000B14  EF38  F006         	goto	l1481
   802  000B18                     u900:
   803  000B18                     
   804                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 681:       
      +                            ++*fmt;
   805  000B18  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   806  000B1C  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   807  000B20  2ADE               	incf	postinc2,f,c
   808  000B22  0E00               	movlw	0
   809  000B24  22DD               	addwfc	postdec2,f,c
   810  000B26                     
   811                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 683:       
      +                            flags = width = 0;
   812  000B26  0E00               	movlw	0
   813  000B28  0100               	movlb	0	; () banked
   814  000B2A  6F63               	movwf	(_width+1)& (0+255),b
   815  000B2C  0E00               	movlw	0
   816  000B2E  6F62               	movwf	_width& (0+255),b
   817  000B30  C062  F066         	movff	_width,_flags
   818  000B34  C063  F067         	movff	_width+1,_flags+1
   819  000B38                     
   820                           ; BSR set to: 0
   821                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 684:       
      +                            prec = -1;
   822  000B38  6964               	setf	_prec& (0+255),b
   823  000B3A  6965               	setf	(_prec+1)& (0+255),b
   824  000B3C                     
   825                           ; BSR set to: 0
   826                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 825:       
      +                            if ((*fmt[0] == 'd') || (*fmt[0] == 'i')) {
   827  000B3C  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   828  000B40  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   829  000B44  CFDE FFF6          	movff	postinc2,tblptrl
   830  000B48  CFDD FFF7          	movff	postdec2,tblptrh
   831  000B4C                     	if	0	;tblptru may be non-zero
   832  000B4C                     	endif
   833  000B4C                     	if	0	;tblptru may be non-zero
   834  000B4C                     	endif
   835  000B4C  0008               	tblrd		*
   836  000B4E  50F5               	movf	tablat,w,c
   837  000B50  0A64               	xorlw	100
   838  000B52  B4D8               	btfsc	status,2,c
   839  000B54  EFAE  F005         	goto	u911
   840  000B58  EFB0  F005         	goto	u910
   841  000B5C                     u911:
   842  000B5C  EFC2  F005         	goto	l1459
   843  000B60                     u910:
   844  000B60                     
   845                           ; BSR set to: 0
   846  000B60  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   847  000B64  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   848  000B68  CFDE FFF6          	movff	postinc2,tblptrl
   849  000B6C  CFDD FFF7          	movff	postdec2,tblptrh
   850  000B70                     	if	0	;tblptru may be non-zero
   851  000B70                     	endif
   852  000B70                     	if	0	;tblptru may be non-zero
   853  000B70                     	endif
   854  000B70  0008               	tblrd		*
   855  000B72  50F5               	movf	tablat,w,c
   856  000B74  0A69               	xorlw	105
   857  000B76  A4D8               	btfss	status,2,c
   858  000B78  EFC0  F005         	goto	u921
   859  000B7C  EFC2  F005         	goto	u920
   860  000B80                     u921:
   861  000B80  EF02  F006         	goto	l1465
   862  000B84                     u920:
   863  000B84                     l1459:
   864                           
   865                           ; BSR set to: 0
   866                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 827:       
      +                                ++*fmt;
   867  000B84  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   868  000B88  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   869  000B8C  2ADE               	incf	postinc2,f,c
   870  000B8E  0E00               	movlw	0
   871  000B90  22DD               	addwfc	postdec2,f,c
   872                           
   873                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 828:       
      +                                ll = (long long)(*(int *)__va_arg(*(int **)ap, (int)0));
   874  000B92  C044  FFD9         	movff	vfpfcnvrt@ap,fsr2l
   875  000B96  C045  FFDA         	movff	vfpfcnvrt@ap+1,fsr2h
   876  000B9A  CFDF F046          	movff	indf2,??_vfpfcnvrt
   877  000B9E  0E02               	movlw	2
   878  000BA0  26DE               	addwf	postinc2,f,c
   879  000BA2  CFDF F047          	movff	indf2,??_vfpfcnvrt+1
   880  000BA6  0E00               	movlw	0
   881  000BA8  22DD               	addwfc	postdec2,f,c
   882  000BAA  C046  FFD9         	movff	??_vfpfcnvrt,fsr2l
   883  000BAE  C047  FFDA         	movff	??_vfpfcnvrt+1,fsr2h
   884  000BB2  CFDE F048          	movff	postinc2,vfpfcnvrt@ll
   885  000BB6  CFDD F049          	movff	postdec2,vfpfcnvrt@ll+1
   886  000BBA  0E00               	movlw	0
   887  000BBC  BE49               	btfsc	(vfpfcnvrt@ll+1)^0,7,c
   888  000BBE  0EFF               	movlw	-1
   889  000BC0  6E4A               	movwf	(vfpfcnvrt@ll+2)^0,c
   890  000BC2  6E4B               	movwf	(vfpfcnvrt@ll+3)^0,c
   891  000BC4  6E4C               	movwf	(vfpfcnvrt@ll+4)^0,c
   892  000BC6  6E4D               	movwf	(vfpfcnvrt@ll+5)^0,c
   893  000BC8  6E4E               	movwf	(vfpfcnvrt@ll+6)^0,c
   894  000BCA  6E4F               	movwf	(vfpfcnvrt@ll+7)^0,c
   895  000BCC                     
   896                           ; BSR set to: 0
   897                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 830:       
      +                                return dtoa(fp, ll);
   898  000BCC  C040  F01C         	movff	vfpfcnvrt@fp,dtoa@fp
   899  000BD0  C041  F01D         	movff	vfpfcnvrt@fp+1,dtoa@fp+1
   900  000BD4  C048  F01E         	movff	vfpfcnvrt@ll,dtoa@d
   901  000BD8  C049  F01F         	movff	vfpfcnvrt@ll+1,dtoa@d+1
   902  000BDC  C04A  F020         	movff	vfpfcnvrt@ll+2,dtoa@d+2
   903  000BE0  C04B  F021         	movff	vfpfcnvrt@ll+3,dtoa@d+3
   904  000BE4  C04C  F022         	movff	vfpfcnvrt@ll+4,dtoa@d+4
   905  000BE8  C04D  F023         	movff	vfpfcnvrt@ll+5,dtoa@d+5
   906  000BEC  C04E  F024         	movff	vfpfcnvrt@ll+6,dtoa@d+6
   907  000BF0  C04F  F025         	movff	vfpfcnvrt@ll+7,dtoa@d+7
   908  000BF4  EC09  F004         	call	_dtoa	;wreg free
   909  000BF8  C01C  F040         	movff	?_dtoa,?_vfpfcnvrt
   910  000BFC  C01D  F041         	movff	?_dtoa+1,?_vfpfcnvrt+1
   911  000C00  EF53  F006         	goto	l131
   912  000C04                     l1465:
   913                           
   914                           ; BSR set to: 0
   915                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1350:      
      +                             if ((*fmt)[0] == '%') {
   916  000C04  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   917  000C08  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   918  000C0C  CFDE FFF6          	movff	postinc2,tblptrl
   919  000C10  CFDD FFF7          	movff	postdec2,tblptrh
   920  000C14                     	if	0	;tblptru may be non-zero
   921  000C14                     	endif
   922  000C14                     	if	0	;tblptru may be non-zero
   923  000C14                     	endif
   924  000C14  0008               	tblrd		*
   925  000C16  50F5               	movf	tablat,w,c
   926  000C18  0A25               	xorlw	37
   927  000C1A  A4D8               	btfss	status,2,c
   928  000C1C  EF12  F006         	goto	u931
   929  000C20  EF14  F006         	goto	u930
   930  000C24                     u931:
   931  000C24  EF2B  F006         	goto	l1475
   932  000C28                     u930:
   933  000C28                     
   934                           ; BSR set to: 0
   935                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1351:      
      +                                 ++*fmt;
   936  000C28  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   937  000C2C  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   938  000C30  2ADE               	incf	postinc2,f,c
   939  000C32  0E00               	movlw	0
   940  000C34  22DD               	addwfc	postdec2,f,c
   941  000C36                     
   942                           ; BSR set to: 0
   943                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1352:      
      +                                 fputc((int)'%', fp);
   944  000C36  0E00               	movlw	0
   945  000C38  6E02               	movwf	(fputc@c+1)^0,c
   946  000C3A  0E25               	movlw	37
   947  000C3C  6E01               	movwf	fputc@c^0,c
   948  000C3E  C040  F003         	movff	vfpfcnvrt@fp,fputc@fp
   949  000C42  C041  F004         	movff	vfpfcnvrt@fp+1,fputc@fp+1
   950  000C46  ECCA  F007         	call	_fputc	;wreg free
   951  000C4A                     l1471:
   952                           
   953                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1353:      
      +                                 return 1;
   954  000C4A  0E00               	movlw	0
   955  000C4C  6E41               	movwf	(?_vfpfcnvrt+1)^0,c
   956  000C4E  0E01               	movlw	1
   957  000C50  6E40               	movwf	?_vfpfcnvrt^0,c
   958  000C52  EF53  F006         	goto	l131
   959  000C56                     l1475:
   960                           
   961                           ; BSR set to: 0
   962                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1357:      
      +                             ++*fmt;
   963  000C56  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   964  000C5A  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   965  000C5E  2ADE               	incf	postinc2,f,c
   966  000C60  0E00               	movlw	0
   967  000C62  22DD               	addwfc	postdec2,f,c
   968  000C64                     
   969                           ; BSR set to: 0
   970                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1358:      
      +                             return 0;
   971  000C64  0E00               	movlw	0
   972  000C66  6E41               	movwf	(?_vfpfcnvrt+1)^0,c
   973  000C68  0E00               	movlw	0
   974  000C6A  6E40               	movwf	?_vfpfcnvrt^0,c
   975  000C6C  EF53  F006         	goto	l131
   976  000C70                     l1481:
   977                           
   978                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1362:     f
      +                          putc((int)(*fmt)[0], fp);
   979  000C70  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   980  000C74  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   981  000C78  CFDE FFF6          	movff	postinc2,tblptrl
   982  000C7C  CFDD FFF7          	movff	postdec2,tblptrh
   983  000C80                     	if	0	;tblptru may be non-zero
   984  000C80                     	endif
   985  000C80                     	if	0	;tblptru may be non-zero
   986  000C80                     	endif
   987  000C80  0008               	tblrd		*
   988  000C82  50F5               	movf	tablat,w,c
   989  000C84  6E01               	movwf	fputc@c^0,c
   990  000C86  6A02               	clrf	(fputc@c+1)^0,c
   991  000C88  C040  F003         	movff	vfpfcnvrt@fp,fputc@fp
   992  000C8C  C041  F004         	movff	vfpfcnvrt@fp+1,fputc@fp+1
   993  000C90  ECCA  F007         	call	_fputc	;wreg free
   994  000C94                     
   995                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1363:     +
      +                          +*fmt;
   996  000C94  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   997  000C98  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   998  000C9C  2ADE               	incf	postinc2,f,c
   999  000C9E  0E00               	movlw	0
  1000  000CA0  22DD               	addwfc	postdec2,f,c
  1001  000CA2  EF25  F006         	goto	l1471
  1002  000CA6                     l131:
  1003  000CA6  0012               	return		;funcret
  1004  000CA8                     __end_of_vfpfcnvrt:
  1005                           	opt callstack 0
  1006                           
  1007 ;; *************** function _dtoa *****************
  1008 ;; Defined at:
  1009 ;;		line 274 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c"
  1010 ;; Parameters:    Size  Location     Type
  1011 ;;  fp              2   27[COMRAM] PTR struct _IO_FILE
  1012 ;;		 -> sprintf@f(6), 
  1013 ;;  d               8   29[COMRAM] long long 
  1014 ;; Auto vars:     Size  Location     Type
  1015 ;;  n               8   53[COMRAM] long long 
  1016 ;;  i               2   61[COMRAM] int 
  1017 ;;  s               2   51[COMRAM] int 
  1018 ;;  w               2   49[COMRAM] int 
  1019 ;;  p               2   47[COMRAM] int 
  1020 ;; Return value:  Size  Location     Type
  1021 ;;                  2   27[COMRAM] int 
  1022 ;; Registers used:
  1023 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1024 ;; Tracked objects:
  1025 ;;		On entry : 0/0
  1026 ;;		On exit  : 0/0
  1027 ;;		Unchanged: 0/0
  1028 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1029 ;;      Params:        10       0       0       0       0       0       0       0       0
  1030 ;;      Locals:        18       0       0       0       0       0       0       0       0
  1031 ;;      Temps:          8       0       0       0       0       0       0       0       0
  1032 ;;      Totals:        36       0       0       0       0       0       0       0       0
  1033 ;;Total ram usage:       36 bytes
  1034 ;; Hardware stack levels used:    1
  1035 ;; Hardware stack levels required when called:    4
  1036 ;; This function calls:
  1037 ;;		___aodiv
  1038 ;;		___aomod
  1039 ;;		_abs
  1040 ;;		_pad
  1041 ;; This function is called by:
  1042 ;;		_vfpfcnvrt
  1043 ;; This function uses a non-reentrant model
  1044 ;;
  1045                           
  1046                           	psect	text4
  1047  000812                     __ptext4:
  1048                           	opt callstack 0
  1049  000812                     _dtoa:
  1050                           	opt callstack 23
  1051  000812                     
  1052                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 274: static
      +                           int dtoa(FILE *fp, long long d);C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\
      +                          c99\common\doprnt.c: 275: {;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\c
      +                          ommon\doprnt.c: 276:     int i, p, s, w;;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\
      +                          sources\c99\common\doprnt.c: 277:     long long n;;C:\Program Files (x86)\Microchip\xc8\
      +                          v2.10\pic\sources\c99\common\doprnt.c: 280:     n = d;
  1053  000812  C01E  F036         	movff	dtoa@d,dtoa@n
  1054  000816  C01F  F037         	movff	dtoa@d+1,dtoa@n+1
  1055  00081A  C020  F038         	movff	dtoa@d+2,dtoa@n+2
  1056  00081E  C021  F039         	movff	dtoa@d+3,dtoa@n+3
  1057  000822  C022  F03A         	movff	dtoa@d+4,dtoa@n+4
  1058  000826  C023  F03B         	movff	dtoa@d+5,dtoa@n+5
  1059  00082A  C024  F03C         	movff	dtoa@d+6,dtoa@n+6
  1060  00082E  C025  F03D         	movff	dtoa@d+7,dtoa@n+7
  1061  000832                     
  1062                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 281:     s 
      +                          = n < 0 ? 1 : 0;
  1063  000832  BE3D               	btfsc	(dtoa@n+7)^0,7,c
  1064  000834  EF1E  F004         	goto	u751
  1065  000838  EF21  F004         	goto	u750
  1066  00083C                     u751:
  1067  00083C  0E01               	movlw	1
  1068  00083E  EF22  F004         	goto	u760
  1069  000842                     u750:
  1070  000842  0E00               	movlw	0
  1071  000844                     u760:
  1072  000844  6E34               	movwf	dtoa@s^0,c
  1073  000846  6A35               	clrf	(dtoa@s+1)^0,c
  1074                           
  1075                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 282:     if
      +                           (s) {
  1076  000848  5034               	movf	dtoa@s^0,w,c
  1077  00084A  1035               	iorwf	(dtoa@s+1)^0,w,c
  1078  00084C  B4D8               	btfsc	status,2,c
  1079  00084E  EF2B  F004         	goto	u771
  1080  000852  EF2D  F004         	goto	u770
  1081  000856                     u771:
  1082  000856  EF3D  F004         	goto	l1383
  1083  00085A                     u770:
  1084  00085A                     
  1085                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 283:       
      +                            n = -n;
  1086  00085A  1E3D               	comf	(dtoa@n+7)^0,f,c
  1087  00085C  1E3C               	comf	(dtoa@n+6)^0,f,c
  1088  00085E  1E3B               	comf	(dtoa@n+5)^0,f,c
  1089  000860  1E3A               	comf	(dtoa@n+4)^0,f,c
  1090  000862  1E39               	comf	(dtoa@n+3)^0,f,c
  1091  000864  1E38               	comf	(dtoa@n+2)^0,f,c
  1092  000866  1E37               	comf	(dtoa@n+1)^0,f,c
  1093  000868  6C36               	negf	dtoa@n^0,c
  1094  00086A  0E00               	movlw	0
  1095  00086C  2237               	addwfc	(dtoa@n+1)^0,f,c
  1096  00086E  2238               	addwfc	(dtoa@n+2)^0,f,c
  1097  000870  2239               	addwfc	(dtoa@n+3)^0,f,c
  1098  000872  223A               	addwfc	(dtoa@n+4)^0,f,c
  1099  000874  223B               	addwfc	(dtoa@n+5)^0,f,c
  1100  000876  223C               	addwfc	(dtoa@n+6)^0,f,c
  1101  000878  223D               	addwfc	(dtoa@n+7)^0,f,c
  1102  00087A                     l1383:
  1103                           
  1104                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 287:     if
      +                           (!(prec < 0)) {
  1105  00087A  0100               	movlb	0	; () banked
  1106  00087C  BF65               	btfsc	(_prec+1)& (0+255),7,b
  1107  00087E  EF43  F004         	goto	u781
  1108  000882  EF45  F004         	goto	u780
  1109  000886                     u781:
  1110  000886  EF46  F004         	goto	l1387
  1111  00088A                     u780:
  1112  00088A                     
  1113                           ; BSR set to: 0
  1114                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 288:       
      +                            flags &= ~(1 << 1);
  1115  00088A  9366               	bcf	_flags& (0+255),1,b
  1116  00088C                     l1387:
  1117                           
  1118                           ; BSR set to: 0
  1119                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 290:     p 
      +                          = (0 < prec) ? prec : 1;
  1120  00088C  BF65               	btfsc	(_prec+1)& (0+255),7,b
  1121  00088E  EF53  F004         	goto	u790
  1122  000892  5165               	movf	(_prec+1)& (0+255),w,b
  1123  000894  E106               	bnz	u791
  1124  000896  0564               	decf	_prec& (0+255),w,b
  1125  000898  B0D8               	btfsc	status,0,c
  1126  00089A  EF51  F004         	goto	u791
  1127  00089E  EF53  F004         	goto	u790
  1128  0008A2                     u791:
  1129  0008A2  EF59  F004         	goto	l104
  1130  0008A6                     u790:
  1131  0008A6                     
  1132                           ; BSR set to: 0
  1133  0008A6  0E00               	movlw	0
  1134  0008A8  6E31               	movwf	(dtoa@p+1)^0,c
  1135  0008AA  0E01               	movlw	1
  1136  0008AC  6E30               	movwf	dtoa@p^0,c
  1137  0008AE  EF5D  F004         	goto	l106
  1138  0008B2                     l104:
  1139                           
  1140                           ; BSR set to: 0
  1141  0008B2  C064  F030         	movff	_prec,dtoa@p
  1142  0008B6  C065  F031         	movff	_prec+1,dtoa@p+1
  1143  0008BA                     l106:
  1144                           
  1145                           ; BSR set to: 0
  1146                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 291:     w 
      +                          = width;
  1147  0008BA  C062  F032         	movff	_width,dtoa@w
  1148  0008BE  C063  F033         	movff	_width+1,dtoa@w+1
  1149  0008C2                     
  1150                           ; BSR set to: 0
  1151                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 292:     if
      +                           (s || (flags & (1 << 2))) {
  1152  0008C2  5034               	movf	dtoa@s^0,w,c
  1153  0008C4  1035               	iorwf	(dtoa@s+1)^0,w,c
  1154  0008C6  A4D8               	btfss	status,2,c
  1155  0008C8  EF68  F004         	goto	u801
  1156  0008CC  EF6A  F004         	goto	u800
  1157  0008D0                     u801:
  1158  0008D0  EF71  F004         	goto	l1395
  1159  0008D4                     u800:
  1160  0008D4                     
  1161                           ; BSR set to: 0
  1162  0008D4  A566               	btfss	_flags& (0+255),2,b
  1163  0008D6  EF6F  F004         	goto	u811
  1164  0008DA  EF71  F004         	goto	u810
  1165  0008DE                     u811:
  1166  0008DE  EF74  F004         	goto	l1397
  1167  0008E2                     u810:
  1168  0008E2                     l1395:
  1169                           
  1170                           ; BSR set to: 0
  1171                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 293:       
      +                            --w;
  1172  0008E2  0632               	decf	dtoa@w^0,f,c
  1173  0008E4  A0D8               	btfss	status,0,c
  1174  0008E6  0633               	decf	(dtoa@w+1)^0,f,c
  1175  0008E8                     l1397:
  1176                           
  1177                           ; BSR set to: 0
  1178                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 297:     i 
      +                          = sizeof(dbuf) - 1;
  1179  0008E8  0E00               	movlw	0
  1180  0008EA  6E3F               	movwf	(dtoa@i+1)^0,c
  1181  0008EC  0E1F               	movlw	31
  1182  0008EE  6E3E               	movwf	dtoa@i^0,c
  1183  0008F0                     
  1184                           ; BSR set to: 0
  1185                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 298:     db
      +                          uf[i] = '\0';
  1186  0008F0  0E00               	movlw	0
  1187  0008F2  6F89               	movwf	(_dbuf+31)& (0+255),b
  1188                           
  1189                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 299:     wh
      +                          ile (!(i < 1) && (n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
  1190  0008F4  EFF8  F004         	goto	l1411
  1191  0008F8                     l1401:
  1192                           
  1193                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 300:       
      +                            --i;
  1194  0008F8  063E               	decf	dtoa@i^0,f,c
  1195  0008FA  A0D8               	btfss	status,0,c
  1196  0008FC  063F               	decf	(dtoa@i+1)^0,f,c
  1197  0008FE                     
  1198                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 301:       
      +                            dbuf[i] = '0' + abs(n % 10);
  1199  0008FE  0E6A               	movlw	low _dbuf
  1200  000900  243E               	addwf	dtoa@i^0,w,c
  1201  000902  6ED9               	movwf	fsr2l,c
  1202  000904  0E00               	movlw	high _dbuf
  1203  000906  203F               	addwfc	(dtoa@i+1)^0,w,c
  1204  000908  6EDA               	movwf	fsr2h,c
  1205  00090A  C036  F001         	movff	dtoa@n,___aomod@dividend
  1206  00090E  C037  F002         	movff	dtoa@n+1,___aomod@dividend+1
  1207  000912  C038  F003         	movff	dtoa@n+2,___aomod@dividend+2
  1208  000916  C039  F004         	movff	dtoa@n+3,___aomod@dividend+3
  1209  00091A  C03A  F005         	movff	dtoa@n+4,___aomod@dividend+4
  1210  00091E  C03B  F006         	movff	dtoa@n+5,___aomod@dividend+5
  1211  000922  C03C  F007         	movff	dtoa@n+6,___aomod@dividend+6
  1212  000926  C03D  F008         	movff	dtoa@n+7,___aomod@dividend+7
  1213  00092A  0E0A               	movlw	10
  1214  00092C  6E09               	movwf	___aomod@divisor^0,c
  1215  00092E  0E00               	movlw	0
  1216  000930  6E0A               	movwf	(___aomod@divisor+1)^0,c
  1217  000932  0E00               	movlw	0
  1218  000934  6E0B               	movwf	(___aomod@divisor+2)^0,c
  1219  000936  0E00               	movlw	0
  1220  000938  6E0C               	movwf	(___aomod@divisor+3)^0,c
  1221  00093A  0E00               	movlw	0
  1222  00093C  6E0D               	movwf	(___aomod@divisor+4)^0,c
  1223  00093E  0E00               	movlw	0
  1224  000940  6E0E               	movwf	(___aomod@divisor+5)^0,c
  1225  000942  0E00               	movlw	0
  1226  000944  6E0F               	movwf	(___aomod@divisor+6)^0,c
  1227  000946  0E00               	movlw	0
  1228  000948  6E10               	movwf	(___aomod@divisor+7)^0,c
  1229  00094A  EC18  F007         	call	___aomod	;wreg free
  1230  00094E  C001  F026         	movff	?___aomod,??_dtoa
  1231  000952  C002  F027         	movff	?___aomod+1,??_dtoa+1
  1232  000956  C003  F028         	movff	?___aomod+2,??_dtoa+2
  1233  00095A  C004  F029         	movff	?___aomod+3,??_dtoa+3
  1234  00095E  C005  F02A         	movff	?___aomod+4,??_dtoa+4
  1235  000962  C006  F02B         	movff	?___aomod+5,??_dtoa+5
  1236  000966  C007  F02C         	movff	?___aomod+6,??_dtoa+6
  1237  00096A  C008  F02D         	movff	?___aomod+7,??_dtoa+7
  1238  00096E  C026  F013         	movff	??_dtoa,abs@a
  1239  000972  C028  F014         	movff	??_dtoa+2,abs@a+1
  1240  000976  EC11  F00B         	call	_abs	;wreg free
  1241  00097A  5013               	movf	?_abs^0,w,c
  1242  00097C  0F30               	addlw	48
  1243  00097E  6EDF               	movwf	indf2,c
  1244  000980                     
  1245                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 302:       
      +                            --p;
  1246  000980  0630               	decf	dtoa@p^0,f,c
  1247  000982  A0D8               	btfss	status,0,c
  1248  000984  0631               	decf	(dtoa@p+1)^0,f,c
  1249  000986                     
  1250                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 303:       
      +                            --w;
  1251  000986  0632               	decf	dtoa@w^0,f,c
  1252  000988  A0D8               	btfss	status,0,c
  1253  00098A  0633               	decf	(dtoa@w+1)^0,f,c
  1254  00098C                     
  1255                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 304:       
      +                            n = n / 10;
  1256  00098C  C036  F001         	movff	dtoa@n,___aodiv@dividend
  1257  000990  C037  F002         	movff	dtoa@n+1,___aodiv@dividend+1
  1258  000994  C038  F003         	movff	dtoa@n+2,___aodiv@dividend+2
  1259  000998  C039  F004         	movff	dtoa@n+3,___aodiv@dividend+3
  1260  00099C  C03A  F005         	movff	dtoa@n+4,___aodiv@dividend+4
  1261  0009A0  C03B  F006         	movff	dtoa@n+5,___aodiv@dividend+5
  1262  0009A4  C03C  F007         	movff	dtoa@n+6,___aodiv@dividend+6
  1263  0009A8  C03D  F008         	movff	dtoa@n+7,___aodiv@dividend+7
  1264  0009AC  0E0A               	movlw	10
  1265  0009AE  6E09               	movwf	___aodiv@divisor^0,c
  1266  0009B0  0E00               	movlw	0
  1267  0009B2  6E0A               	movwf	(___aodiv@divisor+1)^0,c
  1268  0009B4  0E00               	movlw	0
  1269  0009B6  6E0B               	movwf	(___aodiv@divisor+2)^0,c
  1270  0009B8  0E00               	movlw	0
  1271  0009BA  6E0C               	movwf	(___aodiv@divisor+3)^0,c
  1272  0009BC  0E00               	movlw	0
  1273  0009BE  6E0D               	movwf	(___aodiv@divisor+4)^0,c
  1274  0009C0  0E00               	movlw	0
  1275  0009C2  6E0E               	movwf	(___aodiv@divisor+5)^0,c
  1276  0009C4  0E00               	movlw	0
  1277  0009C6  6E0F               	movwf	(___aodiv@divisor+6)^0,c
  1278  0009C8  0E00               	movlw	0
  1279  0009CA  6E10               	movwf	(___aodiv@divisor+7)^0,c
  1280  0009CC  EC54  F006         	call	___aodiv	;wreg free
  1281  0009D0  C001  F036         	movff	?___aodiv,dtoa@n
  1282  0009D4  C002  F037         	movff	?___aodiv+1,dtoa@n+1
  1283  0009D8  C003  F038         	movff	?___aodiv+2,dtoa@n+2
  1284  0009DC  C004  F039         	movff	?___aodiv+3,dtoa@n+3
  1285  0009E0  C005  F03A         	movff	?___aodiv+4,dtoa@n+4
  1286  0009E4  C006  F03B         	movff	?___aodiv+5,dtoa@n+5
  1287  0009E8  C007  F03C         	movff	?___aodiv+6,dtoa@n+6
  1288  0009EC  C008  F03D         	movff	?___aodiv+7,dtoa@n+7
  1289  0009F0                     l1411:
  1290                           
  1291                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 299:     wh
      +                          ile (!(i < 1) && (n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
  1292  0009F0  BE3F               	btfsc	(dtoa@i+1)^0,7,c
  1293  0009F2  EF03  F005         	goto	u821
  1294  0009F6  503F               	movf	(dtoa@i+1)^0,w,c
  1295  0009F8  E108               	bnz	u820
  1296  0009FA  043E               	decf	dtoa@i^0,w,c
  1297  0009FC  A0D8               	btfss	status,0,c
  1298  0009FE  EF03  F005         	goto	u821
  1299  000A02  EF05  F005         	goto	u820
  1300  000A06                     u821:
  1301  000A06  EF36  F005         	goto	l1421
  1302  000A0A                     u820:
  1303  000A0A  5036               	movf	dtoa@n^0,w,c
  1304  000A0C  1037               	iorwf	(dtoa@n+1)^0,w,c
  1305  000A0E  1038               	iorwf	(dtoa@n+2)^0,w,c
  1306  000A10  1039               	iorwf	(dtoa@n+3)^0,w,c
  1307  000A12  103A               	iorwf	(dtoa@n+4)^0,w,c
  1308  000A14  103B               	iorwf	(dtoa@n+5)^0,w,c
  1309  000A16  103C               	iorwf	(dtoa@n+6)^0,w,c
  1310  000A18  103D               	iorwf	(dtoa@n+7)^0,w,c
  1311  000A1A  A4D8               	btfss	status,2,c
  1312  000A1C  EF12  F005         	goto	u831
  1313  000A20  EF14  F005         	goto	u830
  1314  000A24                     u831:
  1315  000A24  EF7C  F004         	goto	l1401
  1316  000A28                     u830:
  1317  000A28  BE31               	btfsc	(dtoa@p+1)^0,7,c
  1318  000A2A  EF21  F005         	goto	u840
  1319  000A2E  5031               	movf	(dtoa@p+1)^0,w,c
  1320  000A30  E106               	bnz	u841
  1321  000A32  0430               	decf	dtoa@p^0,w,c
  1322  000A34  B0D8               	btfsc	status,0,c
  1323  000A36  EF1F  F005         	goto	u841
  1324  000A3A  EF21  F005         	goto	u840
  1325  000A3E                     u841:
  1326  000A3E  EF7C  F004         	goto	l1401
  1327  000A42                     u840:
  1328  000A42  BE33               	btfsc	(dtoa@w+1)^0,7,c
  1329  000A44  EF2C  F005         	goto	u851
  1330  000A48  5033               	movf	(dtoa@w+1)^0,w,c
  1331  000A4A  E108               	bnz	u850
  1332  000A4C  0432               	decf	dtoa@w^0,w,c
  1333  000A4E  A0D8               	btfss	status,0,c
  1334  000A50  EF2C  F005         	goto	u851
  1335  000A54  EF2E  F005         	goto	u850
  1336  000A58                     u851:
  1337  000A58  EF36  F005         	goto	l1421
  1338  000A5C                     u850:
  1339  000A5C  0100               	movlb	0	; () banked
  1340  000A5E  B366               	btfsc	_flags& (0+255),1,b
  1341  000A60  EF34  F005         	goto	u861
  1342  000A64  EF36  F005         	goto	u860
  1343  000A68                     u861:
  1344  000A68  EF7C  F004         	goto	l1401
  1345  000A6C                     u860:
  1346  000A6C                     l1421:
  1347                           
  1348                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 308:     if
      +                           (s || (flags & (1 << 2))) {
  1349  000A6C  5034               	movf	dtoa@s^0,w,c
  1350  000A6E  1035               	iorwf	(dtoa@s+1)^0,w,c
  1351  000A70  A4D8               	btfss	status,2,c
  1352  000A72  EF3D  F005         	goto	u871
  1353  000A76  EF3F  F005         	goto	u870
  1354  000A7A                     u871:
  1355  000A7A  EF47  F005         	goto	l1425
  1356  000A7E                     u870:
  1357  000A7E  0100               	movlb	0	; () banked
  1358  000A80  A566               	btfss	_flags& (0+255),2,b
  1359  000A82  EF45  F005         	goto	u881
  1360  000A86  EF47  F005         	goto	u880
  1361  000A8A                     u881:
  1362  000A8A  EF65  F005         	goto	l1435
  1363  000A8E                     u880:
  1364  000A8E                     l1425:
  1365                           
  1366                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 309:       
      +                            --i;
  1367  000A8E  063E               	decf	dtoa@i^0,f,c
  1368  000A90  A0D8               	btfss	status,0,c
  1369  000A92  063F               	decf	(dtoa@i+1)^0,f,c
  1370  000A94                     
  1371                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 310:       
      +                            dbuf[i] = s ? '-' : '+';
  1372  000A94  5034               	movf	dtoa@s^0,w,c
  1373  000A96  1035               	iorwf	(dtoa@s+1)^0,w,c
  1374  000A98  A4D8               	btfss	status,2,c
  1375  000A9A  EF51  F005         	goto	u891
  1376  000A9E  EF53  F005         	goto	u890
  1377  000AA2                     u891:
  1378  000AA2  EF59  F005         	goto	l1431
  1379  000AA6                     u890:
  1380  000AA6  0E00               	movlw	0
  1381  000AA8  6E2F               	movwf	(_dtoa$237+1)^0,c
  1382  000AAA  0E2B               	movlw	43
  1383  000AAC  6E2E               	movwf	_dtoa$237^0,c
  1384  000AAE  EF5D  F005         	goto	l1433
  1385  000AB2                     l1431:
  1386  000AB2  0E00               	movlw	0
  1387  000AB4  6E2F               	movwf	(_dtoa$237+1)^0,c
  1388  000AB6  0E2D               	movlw	45
  1389  000AB8  6E2E               	movwf	_dtoa$237^0,c
  1390  000ABA                     l1433:
  1391  000ABA  0E6A               	movlw	low _dbuf
  1392  000ABC  243E               	addwf	dtoa@i^0,w,c
  1393  000ABE  6ED9               	movwf	fsr2l,c
  1394  000AC0  0E00               	movlw	high _dbuf
  1395  000AC2  203F               	addwfc	(dtoa@i+1)^0,w,c
  1396  000AC4  6EDA               	movwf	fsr2h,c
  1397  000AC6  C02E  FFDF         	movff	_dtoa$237,indf2
  1398  000ACA                     l1435:
  1399                           
  1400                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 314:     re
      +                          turn pad(fp, &dbuf[i], w);
  1401  000ACA  C01C  F011         	movff	dtoa@fp,pad@fp
  1402  000ACE  C01D  F012         	movff	dtoa@fp+1,pad@fp+1
  1403  000AD2  0E6A               	movlw	low _dbuf
  1404  000AD4  243E               	addwf	dtoa@i^0,w,c
  1405  000AD6  6E13               	movwf	pad@buf^0,c
  1406  000AD8  0E00               	movlw	high _dbuf
  1407  000ADA  203F               	addwfc	(dtoa@i+1)^0,w,c
  1408  000ADC  6E14               	movwf	(pad@buf+1)^0,c
  1409  000ADE  C032  F015         	movff	dtoa@w,pad@p
  1410  000AE2  C033  F016         	movff	dtoa@w+1,pad@p+1
  1411  000AE6  EC2F  F008         	call	_pad	;wreg free
  1412  000AEA  C011  F01C         	movff	?_pad,?_dtoa
  1413  000AEE  C012  F01D         	movff	?_pad+1,?_dtoa+1
  1414  000AF2  0012               	return		;funcret
  1415  000AF4                     __end_of_dtoa:
  1416                           	opt callstack 0
  1417                           
  1418 ;; *************** function _pad *****************
  1419 ;; Defined at:
  1420 ;;		line 72 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c"
  1421 ;; Parameters:    Size  Location     Type
  1422 ;;  fp              2   16[COMRAM] PTR struct _IO_FILE
  1423 ;;		 -> sprintf@f(6), 
  1424 ;;  buf             2   18[COMRAM] PTR unsigned char 
  1425 ;;		 -> dbuf(32), 
  1426 ;;  p               2   20[COMRAM] int 
  1427 ;; Auto vars:     Size  Location     Type
  1428 ;;  w               2   25[COMRAM] int 
  1429 ;;  i               2   23[COMRAM] int 
  1430 ;; Return value:  Size  Location     Type
  1431 ;;                  2   16[COMRAM] int 
  1432 ;; Registers used:
  1433 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1434 ;; Tracked objects:
  1435 ;;		On entry : 0/0
  1436 ;;		On exit  : 0/0
  1437 ;;		Unchanged: 0/0
  1438 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1439 ;;      Params:         6       0       0       0       0       0       0       0       0
  1440 ;;      Locals:         4       0       0       0       0       0       0       0       0
  1441 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1442 ;;      Totals:        11       0       0       0       0       0       0       0       0
  1443 ;;Total ram usage:       11 bytes
  1444 ;; Hardware stack levels used:    1
  1445 ;; Hardware stack levels required when called:    3
  1446 ;; This function calls:
  1447 ;;		_fputc
  1448 ;;		_fputs
  1449 ;;		_strlen
  1450 ;; This function is called by:
  1451 ;;		_dtoa
  1452 ;; This function uses a non-reentrant model
  1453 ;;
  1454                           
  1455                           	psect	text5
  1456  00105E                     __ptext5:
  1457                           	opt callstack 0
  1458  00105E                     _pad:
  1459                           	opt callstack 23
  1460  00105E                     
  1461                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 72: static 
      +                          int pad(FILE *fp, char *buf, int p);C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sourc
      +                          es\c99\common\doprnt.c: 73: {;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99
      +                          \common\doprnt.c: 74:     int i, w;;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sourc
      +                          es\c99\common\doprnt.c: 77:     if (flags & (1 << 0)) {
  1462  00105E  0100               	movlb	0	; () banked
  1463  001060  A166               	btfss	_flags& (0+255),0,b
  1464  001062  EF35  F008         	goto	u571
  1465  001066  EF37  F008         	goto	u570
  1466  00106A                     u571:
  1467  00106A  EF41  F008         	goto	l1267
  1468  00106E                     u570:
  1469  00106E                     
  1470                           ; BSR set to: 0
  1471                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 78:        
      +                           fputs((const char *)buf, fp);
  1472  00106E  C013  F00A         	movff	pad@buf,fputs@s
  1473  001072  C014  F00B         	movff	pad@buf+1,fputs@s+1
  1474  001076  C011  F00C         	movff	pad@fp,fputs@fp
  1475  00107A  C012  F00D         	movff	pad@fp+1,fputs@fp+1
  1476  00107E  ECEF  F00A         	call	_fputs	;wreg free
  1477  001082                     l1267:
  1478                           
  1479                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 82:     w =
      +                           (p < 0) ? 0 : p;
  1480  001082  BE16               	btfsc	(pad@p+1)^0,7,c
  1481  001084  EF46  F008         	goto	u581
  1482  001088  EF48  F008         	goto	u580
  1483  00108C                     u581:
  1484  00108C  EF4E  F008         	goto	l1271
  1485  001090                     u580:
  1486  001090  C015  F01A         	movff	pad@p,pad@w
  1487  001094  C016  F01B         	movff	pad@p+1,pad@w+1
  1488  001098  EF52  F008         	goto	l93
  1489  00109C                     l1271:
  1490  00109C  0E00               	movlw	0
  1491  00109E  6E1B               	movwf	(pad@w+1)^0,c
  1492  0010A0  0E00               	movlw	0
  1493  0010A2  6E1A               	movwf	pad@w^0,c
  1494  0010A4                     l93:
  1495                           
  1496                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 83:     i =
      +                           0;
  1497  0010A4  0E00               	movlw	0
  1498  0010A6  6E19               	movwf	(pad@i+1)^0,c
  1499  0010A8  0E00               	movlw	0
  1500  0010AA  6E18               	movwf	pad@i^0,c
  1501                           
  1502                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 84:     whi
      +                          le (i < w) {
  1503  0010AC  EF64  F008         	goto	l1277
  1504  0010B0                     l1273:
  1505                           
  1506                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 85:        
      +                           fputc(' ', fp);
  1507  0010B0  0E00               	movlw	0
  1508  0010B2  6E02               	movwf	(fputc@c+1)^0,c
  1509  0010B4  0E20               	movlw	32
  1510  0010B6  6E01               	movwf	fputc@c^0,c
  1511  0010B8  C011  F003         	movff	pad@fp,fputc@fp
  1512  0010BC  C012  F004         	movff	pad@fp+1,fputc@fp+1
  1513  0010C0  ECCA  F007         	call	_fputc	;wreg free
  1514  0010C4                     
  1515                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 86:        
      +                           ++i;
  1516  0010C4  4A18               	infsnz	pad@i^0,f,c
  1517  0010C6  2A19               	incf	(pad@i+1)^0,f,c
  1518  0010C8                     l1277:
  1519                           
  1520                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 84:     whi
      +                          le (i < w) {
  1521  0010C8  501A               	movf	pad@w^0,w,c
  1522  0010CA  5C18               	subwf	pad@i^0,w,c
  1523  0010CC  5019               	movf	(pad@i+1)^0,w,c
  1524  0010CE  0A80               	xorlw	128
  1525  0010D0  6E17               	movwf	??_pad^0,c
  1526  0010D2  501B               	movf	(pad@w+1)^0,w,c
  1527  0010D4  0A80               	xorlw	128
  1528  0010D6  5817               	subwfb	??_pad^0,w,c
  1529  0010D8  A0D8               	btfss	status,0,c
  1530  0010DA  EF71  F008         	goto	u591
  1531  0010DE  EF73  F008         	goto	u590
  1532  0010E2                     u591:
  1533  0010E2  EF58  F008         	goto	l1273
  1534  0010E6                     u590:
  1535  0010E6                     
  1536                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 90:     if 
      +                          (!(flags & (1 << 0))) {
  1537  0010E6  0100               	movlb	0	; () banked
  1538  0010E8  B166               	btfsc	_flags& (0+255),0,b
  1539  0010EA  EF79  F008         	goto	u601
  1540  0010EE  EF7B  F008         	goto	u600
  1541  0010F2                     u601:
  1542  0010F2  EF85  F008         	goto	l1281
  1543  0010F6                     u600:
  1544  0010F6                     
  1545                           ; BSR set to: 0
  1546                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 91:        
      +                           fputs((const char *)buf, fp);
  1547  0010F6  C013  F00A         	movff	pad@buf,fputs@s
  1548  0010FA  C014  F00B         	movff	pad@buf+1,fputs@s+1
  1549  0010FE  C011  F00C         	movff	pad@fp,fputs@fp
  1550  001102  C012  F00D         	movff	pad@fp+1,fputs@fp+1
  1551  001106  ECEF  F00A         	call	_fputs	;wreg free
  1552  00110A                     l1281:
  1553                           
  1554                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 94:     ret
      +                          urn strlen(buf) + w;
  1555  00110A  C013  F001         	movff	pad@buf,strlen@s
  1556  00110E  C014  F002         	movff	pad@buf+1,strlen@s+1
  1557  001112  EC31  F00B         	call	_strlen	;wreg free
  1558  001116  501A               	movf	pad@w^0,w,c
  1559  001118  2401               	addwf	?_strlen^0,w,c
  1560  00111A  6E11               	movwf	?_pad^0,c
  1561  00111C  501B               	movf	(pad@w+1)^0,w,c
  1562  00111E  2002               	addwfc	(?_strlen+1)^0,w,c
  1563  001120  6E12               	movwf	(?_pad+1)^0,c
  1564  001122  0012               	return		;funcret
  1565  001124                     __end_of_pad:
  1566                           	opt callstack 0
  1567                           
  1568 ;; *************** function _strlen *****************
  1569 ;; Defined at:
  1570 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\strlen.c"
  1571 ;; Parameters:    Size  Location     Type
  1572 ;;  s               2    0[COMRAM] PTR const unsigned char 
  1573 ;;		 -> dbuf(32), 
  1574 ;; Auto vars:     Size  Location     Type
  1575 ;;  a               2    2[COMRAM] PTR const unsigned char 
  1576 ;;		 -> dbuf(32), 
  1577 ;; Return value:  Size  Location     Type
  1578 ;;                  2    0[COMRAM] unsigned int 
  1579 ;; Registers used:
  1580 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1581 ;; Tracked objects:
  1582 ;;		On entry : 0/0
  1583 ;;		On exit  : 0/0
  1584 ;;		Unchanged: 0/0
  1585 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1586 ;;      Params:         2       0       0       0       0       0       0       0       0
  1587 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1588 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1589 ;;      Totals:         4       0       0       0       0       0       0       0       0
  1590 ;;Total ram usage:        4 bytes
  1591 ;; Hardware stack levels used:    1
  1592 ;; This function calls:
  1593 ;;		Nothing
  1594 ;; This function is called by:
  1595 ;;		_pad
  1596 ;; This function uses a non-reentrant model
  1597 ;;
  1598                           
  1599                           	psect	text6
  1600  001662                     __ptext6:
  1601                           	opt callstack 0
  1602  001662                     _strlen:
  1603                           	opt callstack 25
  1604  001662  C001  F003         	movff	strlen@s,strlen@a
  1605  001666  C002  F004         	movff	strlen@s+1,strlen@a+1
  1606  00166A  EF39  F00B         	goto	l1257
  1607  00166E                     l1255:
  1608  00166E  4A01               	infsnz	strlen@s^0,f,c
  1609  001670  2A02               	incf	(strlen@s+1)^0,f,c
  1610  001672                     l1257:
  1611  001672  C001  FFD9         	movff	strlen@s,fsr2l
  1612  001676  C002  FFDA         	movff	strlen@s+1,fsr2h
  1613  00167A  50DF               	movf	indf2,w,c
  1614  00167C  A4D8               	btfss	status,2,c
  1615  00167E  EF43  F00B         	goto	u561
  1616  001682  EF45  F00B         	goto	u560
  1617  001686                     u561:
  1618  001686  EF37  F00B         	goto	l1255
  1619  00168A                     u560:
  1620  00168A  5003               	movf	strlen@a^0,w,c
  1621  00168C  5C01               	subwf	strlen@s^0,w,c
  1622  00168E  6E01               	movwf	?_strlen^0,c
  1623  001690  5004               	movf	(strlen@a+1)^0,w,c
  1624  001692  5802               	subwfb	(strlen@s+1)^0,w,c
  1625  001694  6E02               	movwf	(?_strlen+1)^0,c
  1626  001696  0012               	return		;funcret
  1627  001698                     __end_of_strlen:
  1628                           	opt callstack 0
  1629                           
  1630 ;; *************** function _fputs *****************
  1631 ;; Defined at:
  1632 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\nf_fputs.c"
  1633 ;; Parameters:    Size  Location     Type
  1634 ;;  s               2    9[COMRAM] PTR const unsigned char 
  1635 ;;		 -> dbuf(32), 
  1636 ;;  fp              2   11[COMRAM] PTR struct _IO_FILE
  1637 ;;		 -> sprintf@f(6), 
  1638 ;; Auto vars:     Size  Location     Type
  1639 ;;  i               2   14[COMRAM] int 
  1640 ;;  c               1   13[COMRAM] unsigned char 
  1641 ;; Return value:  Size  Location     Type
  1642 ;;                  2    9[COMRAM] int 
  1643 ;; Registers used:
  1644 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1645 ;; Tracked objects:
  1646 ;;		On entry : 0/0
  1647 ;;		On exit  : 0/0
  1648 ;;		Unchanged: 0/0
  1649 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1650 ;;      Params:         4       0       0       0       0       0       0       0       0
  1651 ;;      Locals:         3       0       0       0       0       0       0       0       0
  1652 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1653 ;;      Totals:         7       0       0       0       0       0       0       0       0
  1654 ;;Total ram usage:        7 bytes
  1655 ;; Hardware stack levels used:    1
  1656 ;; Hardware stack levels required when called:    2
  1657 ;; This function calls:
  1658 ;;		_fputc
  1659 ;; This function is called by:
  1660 ;;		_pad
  1661 ;; This function uses a non-reentrant model
  1662 ;;
  1663                           
  1664                           	psect	text7
  1665  0015DE                     __ptext7:
  1666                           	opt callstack 0
  1667  0015DE                     _fputs:
  1668                           	opt callstack 23
  1669  0015DE  0E00               	movlw	0
  1670  0015E0  6E10               	movwf	(fputs@i+1)^0,c
  1671  0015E2  0E00               	movlw	0
  1672  0015E4  6E0F               	movwf	fputs@i^0,c
  1673  0015E6  EF00  F00B         	goto	l1251
  1674  0015EA                     l1247:
  1675  0015EA  C00E  F001         	movff	fputs@c,fputc@c
  1676  0015EE  6A02               	clrf	(fputc@c+1)^0,c
  1677  0015F0  C00C  F003         	movff	fputs@fp,fputc@fp
  1678  0015F4  C00D  F004         	movff	fputs@fp+1,fputc@fp+1
  1679  0015F8  ECCA  F007         	call	_fputc	;wreg free
  1680  0015FC  4A0F               	infsnz	fputs@i^0,f,c
  1681  0015FE  2A10               	incf	(fputs@i+1)^0,f,c
  1682  001600                     l1251:
  1683  001600  500F               	movf	fputs@i^0,w,c
  1684  001602  240A               	addwf	fputs@s^0,w,c
  1685  001604  6ED9               	movwf	fsr2l,c
  1686  001606  5010               	movf	(fputs@i+1)^0,w,c
  1687  001608  200B               	addwfc	(fputs@s+1)^0,w,c
  1688  00160A  6EDA               	movwf	fsr2h,c
  1689  00160C  50DF               	movf	indf2,w,c
  1690  00160E  6E0E               	movwf	fputs@c^0,c
  1691  001610  500E               	movf	fputs@c^0,w,c
  1692  001612  A4D8               	btfss	status,2,c
  1693  001614  EF0E  F00B         	goto	u551
  1694  001618  EF10  F00B         	goto	u550
  1695  00161C                     u551:
  1696  00161C  EFF5  F00A         	goto	l1247
  1697  001620                     u550:
  1698  001620  0012               	return		;funcret
  1699  001622                     __end_of_fputs:
  1700                           	opt callstack 0
  1701                           
  1702 ;; *************** function _fputc *****************
  1703 ;; Defined at:
  1704 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\nf_fputc.c"
  1705 ;; Parameters:    Size  Location     Type
  1706 ;;  c               2    0[COMRAM] int 
  1707 ;;  fp              2    2[COMRAM] PTR struct _IO_FILE
  1708 ;;		 -> sprintf@f(6), 
  1709 ;; Auto vars:     Size  Location     Type
  1710 ;;		None
  1711 ;; Return value:  Size  Location     Type
  1712 ;;                  2    0[COMRAM] int 
  1713 ;; Registers used:
  1714 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1715 ;; Tracked objects:
  1716 ;;		On entry : 0/0
  1717 ;;		On exit  : 0/0
  1718 ;;		Unchanged: 0/0
  1719 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1720 ;;      Params:         4       0       0       0       0       0       0       0       0
  1721 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1722 ;;      Temps:          5       0       0       0       0       0       0       0       0
  1723 ;;      Totals:         9       0       0       0       0       0       0       0       0
  1724 ;;Total ram usage:        9 bytes
  1725 ;; Hardware stack levels used:    1
  1726 ;; Hardware stack levels required when called:    1
  1727 ;; This function calls:
  1728 ;;		_putch
  1729 ;; This function is called by:
  1730 ;;		_pad
  1731 ;;		_vfpfcnvrt
  1732 ;;		_fputs
  1733 ;; This function uses a non-reentrant model
  1734 ;;
  1735                           
  1736                           	psect	text8
  1737  000F94                     __ptext8:
  1738                           	opt callstack 0
  1739  000F94                     _fputc:
  1740                           	opt callstack 26
  1741  000F94  5003               	movf	fputc@fp^0,w,c
  1742  000F96  1004               	iorwf	(fputc@fp+1)^0,w,c
  1743  000F98  B4D8               	btfsc	status,2,c
  1744  000F9A  EFD1  F007         	goto	u511
  1745  000F9E  EFD3  F007         	goto	u510
  1746  000FA2                     u511:
  1747  000FA2  EFDC  F007         	goto	l1235
  1748  000FA6                     u510:
  1749  000FA6  5003               	movf	fputc@fp^0,w,c
  1750  000FA8  1004               	iorwf	(fputc@fp+1)^0,w,c
  1751  000FAA  A4D8               	btfss	status,2,c
  1752  000FAC  EFDA  F007         	goto	u521
  1753  000FB0  EFDC  F007         	goto	u520
  1754  000FB4                     u521:
  1755  000FB4  EFE1  F007         	goto	l1237
  1756  000FB8                     u520:
  1757  000FB8                     l1235:
  1758  000FB8  5001               	movf	fputc@c^0,w,c
  1759  000FBA  EC5E  F00B         	call	_putch
  1760  000FBE  EF2E  F008         	goto	l831
  1761  000FC2                     l1237:
  1762  000FC2  EE20 F004          	lfsr	2,4
  1763  000FC6  5003               	movf	fputc@fp^0,w,c
  1764  000FC8  26D9               	addwf	fsr2l,f,c
  1765  000FCA  5004               	movf	(fputc@fp+1)^0,w,c
  1766  000FCC  22DA               	addwfc	fsr2h,f,c
  1767  000FCE  50DE               	movf	postinc2,w,c
  1768  000FD0  10DE               	iorwf	postinc2,w,c
  1769  000FD2  B4D8               	btfsc	status,2,c
  1770  000FD4  EFEE  F007         	goto	u531
  1771  000FD8  EFF0  F007         	goto	u530
  1772  000FDC                     u531:
  1773  000FDC  EF0B  F008         	goto	l1241
  1774  000FE0                     u530:
  1775  000FE0  EE20 F004          	lfsr	2,4
  1776  000FE4  5003               	movf	fputc@fp^0,w,c
  1777  000FE6  26D9               	addwf	fsr2l,f,c
  1778  000FE8  5004               	movf	(fputc@fp+1)^0,w,c
  1779  000FEA  22DA               	addwfc	fsr2h,f,c
  1780  000FEC  EE10 F002          	lfsr	1,2
  1781  000FF0  5003               	movf	fputc@fp^0,w,c
  1782  000FF2  26E1               	addwf	fsr1l,f,c
  1783  000FF4  5004               	movf	(fputc@fp+1)^0,w,c
  1784  000FF6  22E2               	addwfc	fsr1h,f,c
  1785  000FF8  50DE               	movf	postinc2,w,c
  1786  000FFA  5CE6               	subwf	postinc1,w,c
  1787  000FFC  50E6               	movf	postinc1,w,c
  1788  000FFE  0A80               	xorlw	128
  1789  001000  6E09               	movwf	(??_fputc+4)^0,c
  1790  001002  50DE               	movf	postinc2,w,c
  1791  001004  0A80               	xorlw	128
  1792  001006  5809               	subwfb	(??_fputc+4)^0,w,c
  1793  001008  B0D8               	btfsc	status,0,c
  1794  00100A  EF09  F008         	goto	u541
  1795  00100E  EF0B  F008         	goto	u540
  1796  001012                     u541:
  1797  001012  EF2E  F008         	goto	l831
  1798  001016                     u540:
  1799  001016                     l1241:
  1800  001016  EE20 F002          	lfsr	2,2
  1801  00101A  5003               	movf	fputc@fp^0,w,c
  1802  00101C  26D9               	addwf	fsr2l,f,c
  1803  00101E  5004               	movf	(fputc@fp+1)^0,w,c
  1804  001020  22DA               	addwfc	fsr2h,f,c
  1805  001022  CFDE F005          	movff	postinc2,??_fputc
  1806  001026  CFDD F006          	movff	postdec2,??_fputc+1
  1807  00102A  C003  FFD9         	movff	fputc@fp,fsr2l
  1808  00102E  C004  FFDA         	movff	fputc@fp+1,fsr2h
  1809  001032  CFDE F007          	movff	postinc2,??_fputc+2
  1810  001036  CFDD F008          	movff	postdec2,??_fputc+3
  1811  00103A  5005               	movf	??_fputc^0,w,c
  1812  00103C  2407               	addwf	(??_fputc+2)^0,w,c
  1813  00103E  6ED9               	movwf	fsr2l,c
  1814  001040  5006               	movf	(??_fputc+1)^0,w,c
  1815  001042  2008               	addwfc	(??_fputc+3)^0,w,c
  1816  001044  6EDA               	movwf	fsr2h,c
  1817  001046  C001  FFDF         	movff	fputc@c,indf2
  1818  00104A  EE20 F002          	lfsr	2,2
  1819  00104E  5003               	movf	fputc@fp^0,w,c
  1820  001050  26D9               	addwf	fsr2l,f,c
  1821  001052  5004               	movf	(fputc@fp+1)^0,w,c
  1822  001054  22DA               	addwfc	fsr2h,f,c
  1823  001056  2ADE               	incf	postinc2,f,c
  1824  001058  0E00               	movlw	0
  1825  00105A  22DD               	addwfc	postdec2,f,c
  1826  00105C                     l831:
  1827  00105C  0012               	return		;funcret
  1828  00105E                     __end_of_fputc:
  1829                           	opt callstack 0
  1830                           
  1831 ;; *************** function _putch *****************
  1832 ;; Defined at:
  1833 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\putch.c"
  1834 ;; Parameters:    Size  Location     Type
  1835 ;;  c               1    wreg     unsigned char 
  1836 ;; Auto vars:     Size  Location     Type
  1837 ;;  c               1    0[COMRAM] unsigned char 
  1838 ;; Return value:  Size  Location     Type
  1839 ;;                  1    wreg      void 
  1840 ;; Registers used:
  1841 ;;		wreg
  1842 ;; Tracked objects:
  1843 ;;		On entry : 0/0
  1844 ;;		On exit  : 0/0
  1845 ;;		Unchanged: 0/0
  1846 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1847 ;;      Params:         0       0       0       0       0       0       0       0       0
  1848 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1849 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1850 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1851 ;;Total ram usage:        0 bytes
  1852 ;; Hardware stack levels used:    1
  1853 ;; This function calls:
  1854 ;;		Nothing
  1855 ;; This function is called by:
  1856 ;;		_fputc
  1857 ;; This function uses a non-reentrant model
  1858 ;;
  1859                           
  1860                           	psect	text9
  1861  0016BC                     __ptext9:
  1862                           	opt callstack 0
  1863  0016BC                     _putch:
  1864                           	opt callstack 26
  1865  0016BC  0012               	return		;funcret
  1866  0016BE                     __end_of_putch:
  1867                           	opt callstack 0
  1868                           
  1869 ;; *************** function _abs *****************
  1870 ;; Defined at:
  1871 ;;		line 1 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\abs.c"
  1872 ;; Parameters:    Size  Location     Type
  1873 ;;  a               2   18[COMRAM] int 
  1874 ;; Auto vars:     Size  Location     Type
  1875 ;;		None
  1876 ;; Return value:  Size  Location     Type
  1877 ;;                  2   18[COMRAM] int 
  1878 ;; Registers used:
  1879 ;;		wreg, status,2, status,0
  1880 ;; Tracked objects:
  1881 ;;		On entry : 0/0
  1882 ;;		On exit  : 0/0
  1883 ;;		Unchanged: 0/0
  1884 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1885 ;;      Params:         2       0       0       0       0       0       0       0       0
  1886 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1887 ;;      Temps:          2       0       0       0       0       0       0       0       0
  1888 ;;      Totals:         4       0       0       0       0       0       0       0       0
  1889 ;;Total ram usage:        4 bytes
  1890 ;; Hardware stack levels used:    1
  1891 ;; This function calls:
  1892 ;;		Nothing
  1893 ;; This function is called by:
  1894 ;;		_dtoa
  1895 ;; This function uses a non-reentrant model
  1896 ;;
  1897                           
  1898                           	psect	text10
  1899  001622                     __ptext10:
  1900                           	opt callstack 0
  1901  001622                     _abs:
  1902                           	opt callstack 26
  1903  001622  BE14               	btfsc	(abs@a+1)^0,7,c
  1904  001624  EF1E  F00B         	goto	u610
  1905  001628  5014               	movf	(abs@a+1)^0,w,c
  1906  00162A  E106               	bnz	u611
  1907  00162C  0413               	decf	abs@a^0,w,c
  1908  00162E  B0D8               	btfsc	status,0,c
  1909  001630  EF1C  F00B         	goto	u611
  1910  001634  EF1E  F00B         	goto	u610
  1911  001638                     u611:
  1912  001638  EF2C  F00B         	goto	l816
  1913  00163C                     u610:
  1914  00163C  C013  F015         	movff	abs@a,??_abs
  1915  001640  C014  F016         	movff	abs@a+1,??_abs+1
  1916  001644  1E15               	comf	??_abs^0,f,c
  1917  001646  1E16               	comf	(??_abs+1)^0,f,c
  1918  001648  4A15               	infsnz	??_abs^0,f,c
  1919  00164A  2A16               	incf	(??_abs+1)^0,f,c
  1920  00164C  C015  F013         	movff	??_abs,?_abs
  1921  001650  C016  F014         	movff	??_abs+1,?_abs+1
  1922  001654  EF30  F00B         	goto	l819
  1923  001658                     l816:
  1924  001658  C013  F013         	movff	abs@a,?_abs
  1925  00165C  C014  F014         	movff	abs@a+1,?_abs+1
  1926  001660                     l819:
  1927  001660  0012               	return		;funcret
  1928  001662                     __end_of_abs:
  1929                           	opt callstack 0
  1930                           
  1931 ;; *************** function ___aomod *****************
  1932 ;; Defined at:
  1933 ;;		line 9 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\aomod.c"
  1934 ;; Parameters:    Size  Location     Type
  1935 ;;  dividend        8    0[COMRAM] long long 
  1936 ;;  divisor         8    8[COMRAM] long long 
  1937 ;; Auto vars:     Size  Location     Type
  1938 ;;  sign            1   17[COMRAM] unsigned char 
  1939 ;;  counter         1   16[COMRAM] unsigned char 
  1940 ;; Return value:  Size  Location     Type
  1941 ;;                  8    0[COMRAM] long long 
  1942 ;; Registers used:
  1943 ;;		wreg, status,2, status,0
  1944 ;; Tracked objects:
  1945 ;;		On entry : 0/0
  1946 ;;		On exit  : 0/0
  1947 ;;		Unchanged: 0/0
  1948 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1949 ;;      Params:        16       0       0       0       0       0       0       0       0
  1950 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1951 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1952 ;;      Totals:        18       0       0       0       0       0       0       0       0
  1953 ;;Total ram usage:       18 bytes
  1954 ;; Hardware stack levels used:    1
  1955 ;; This function calls:
  1956 ;;		Nothing
  1957 ;; This function is called by:
  1958 ;;		_dtoa
  1959 ;; This function uses a non-reentrant model
  1960 ;;
  1961                           
  1962                           	psect	text11
  1963  000E30                     __ptext11:
  1964                           	opt callstack 0
  1965  000E30                     ___aomod:
  1966                           	opt callstack 26
  1967  000E30  0E00               	movlw	0
  1968  000E32  6E12               	movwf	___aomod@sign^0,c
  1969  000E34  BE08               	btfsc	(___aomod@dividend+7)^0,7,c
  1970  000E36  EF21  F007         	goto	u690
  1971  000E3A  EF1F  F007         	goto	u691
  1972  000E3E                     u691:
  1973  000E3E  EF33  F007         	goto	l1341
  1974  000E42                     u690:
  1975  000E42  1E08               	comf	(___aomod@dividend+7)^0,f,c
  1976  000E44  1E07               	comf	(___aomod@dividend+6)^0,f,c
  1977  000E46  1E06               	comf	(___aomod@dividend+5)^0,f,c
  1978  000E48  1E05               	comf	(___aomod@dividend+4)^0,f,c
  1979  000E4A  1E04               	comf	(___aomod@dividend+3)^0,f,c
  1980  000E4C  1E03               	comf	(___aomod@dividend+2)^0,f,c
  1981  000E4E  1E02               	comf	(___aomod@dividend+1)^0,f,c
  1982  000E50  6C01               	negf	___aomod@dividend^0,c
  1983  000E52  0E00               	movlw	0
  1984  000E54  2202               	addwfc	(___aomod@dividend+1)^0,f,c
  1985  000E56  2203               	addwfc	(___aomod@dividend+2)^0,f,c
  1986  000E58  2204               	addwfc	(___aomod@dividend+3)^0,f,c
  1987  000E5A  2205               	addwfc	(___aomod@dividend+4)^0,f,c
  1988  000E5C  2206               	addwfc	(___aomod@dividend+5)^0,f,c
  1989  000E5E  2207               	addwfc	(___aomod@dividend+6)^0,f,c
  1990  000E60  2208               	addwfc	(___aomod@dividend+7)^0,f,c
  1991  000E62  0E01               	movlw	1
  1992  000E64  6E12               	movwf	___aomod@sign^0,c
  1993  000E66                     l1341:
  1994  000E66  BE10               	btfsc	(___aomod@divisor+7)^0,7,c
  1995  000E68  EF3A  F007         	goto	u700
  1996  000E6C  EF38  F007         	goto	u701
  1997  000E70                     u701:
  1998  000E70  EF4A  F007         	goto	l1345
  1999  000E74                     u700:
  2000  000E74  1E10               	comf	(___aomod@divisor+7)^0,f,c
  2001  000E76  1E0F               	comf	(___aomod@divisor+6)^0,f,c
  2002  000E78  1E0E               	comf	(___aomod@divisor+5)^0,f,c
  2003  000E7A  1E0D               	comf	(___aomod@divisor+4)^0,f,c
  2004  000E7C  1E0C               	comf	(___aomod@divisor+3)^0,f,c
  2005  000E7E  1E0B               	comf	(___aomod@divisor+2)^0,f,c
  2006  000E80  1E0A               	comf	(___aomod@divisor+1)^0,f,c
  2007  000E82  6C09               	negf	___aomod@divisor^0,c
  2008  000E84  0E00               	movlw	0
  2009  000E86  220A               	addwfc	(___aomod@divisor+1)^0,f,c
  2010  000E88  220B               	addwfc	(___aomod@divisor+2)^0,f,c
  2011  000E8A  220C               	addwfc	(___aomod@divisor+3)^0,f,c
  2012  000E8C  220D               	addwfc	(___aomod@divisor+4)^0,f,c
  2013  000E8E  220E               	addwfc	(___aomod@divisor+5)^0,f,c
  2014  000E90  220F               	addwfc	(___aomod@divisor+6)^0,f,c
  2015  000E92  2210               	addwfc	(___aomod@divisor+7)^0,f,c
  2016  000E94                     l1345:
  2017  000E94  5009               	movf	___aomod@divisor^0,w,c
  2018  000E96  100A               	iorwf	(___aomod@divisor+1)^0,w,c
  2019  000E98  100B               	iorwf	(___aomod@divisor+2)^0,w,c
  2020  000E9A  100C               	iorwf	(___aomod@divisor+3)^0,w,c
  2021  000E9C  100D               	iorwf	(___aomod@divisor+4)^0,w,c
  2022  000E9E  100E               	iorwf	(___aomod@divisor+5)^0,w,c
  2023  000EA0  100F               	iorwf	(___aomod@divisor+6)^0,w,c
  2024  000EA2  1010               	iorwf	(___aomod@divisor+7)^0,w,c
  2025  000EA4  B4D8               	btfsc	status,2,c
  2026  000EA6  EF57  F007         	goto	u711
  2027  000EAA  EF59  F007         	goto	u710
  2028  000EAE                     u711:
  2029  000EAE  EFA1  F007         	goto	l1361
  2030  000EB2                     u710:
  2031  000EB2  0E01               	movlw	1
  2032  000EB4  6E11               	movwf	___aomod@counter^0,c
  2033  000EB6  EF67  F007         	goto	l1351
  2034  000EBA                     l1349:
  2035  000EBA  90D8               	bcf	status,0,c
  2036  000EBC  3609               	rlcf	___aomod@divisor^0,f,c
  2037  000EBE  360A               	rlcf	(___aomod@divisor+1)^0,f,c
  2038  000EC0  360B               	rlcf	(___aomod@divisor+2)^0,f,c
  2039  000EC2  360C               	rlcf	(___aomod@divisor+3)^0,f,c
  2040  000EC4  360D               	rlcf	(___aomod@divisor+4)^0,f,c
  2041  000EC6  360E               	rlcf	(___aomod@divisor+5)^0,f,c
  2042  000EC8  360F               	rlcf	(___aomod@divisor+6)^0,f,c
  2043  000ECA  3610               	rlcf	(___aomod@divisor+7)^0,f,c
  2044  000ECC  2A11               	incf	___aomod@counter^0,f,c
  2045  000ECE                     l1351:
  2046  000ECE  AE10               	btfss	(___aomod@divisor+7)^0,7,c
  2047  000ED0  EF6C  F007         	goto	u721
  2048  000ED4  EF6E  F007         	goto	u720
  2049  000ED8                     u721:
  2050  000ED8  EF5D  F007         	goto	l1349
  2051  000EDC                     u720:
  2052  000EDC                     l1353:
  2053  000EDC  5009               	movf	___aomod@divisor^0,w,c
  2054  000EDE  5C01               	subwf	___aomod@dividend^0,w,c
  2055  000EE0  500A               	movf	(___aomod@divisor+1)^0,w,c
  2056  000EE2  5802               	subwfb	(___aomod@dividend+1)^0,w,c
  2057  000EE4  500B               	movf	(___aomod@divisor+2)^0,w,c
  2058  000EE6  5803               	subwfb	(___aomod@dividend+2)^0,w,c
  2059  000EE8  500C               	movf	(___aomod@divisor+3)^0,w,c
  2060  000EEA  5804               	subwfb	(___aomod@dividend+3)^0,w,c
  2061  000EEC  500D               	movf	(___aomod@divisor+4)^0,w,c
  2062  000EEE  5805               	subwfb	(___aomod@dividend+4)^0,w,c
  2063  000EF0  500E               	movf	(___aomod@divisor+5)^0,w,c
  2064  000EF2  5806               	subwfb	(___aomod@dividend+5)^0,w,c
  2065  000EF4  500F               	movf	(___aomod@divisor+6)^0,w,c
  2066  000EF6  5807               	subwfb	(___aomod@dividend+6)^0,w,c
  2067  000EF8  5010               	movf	(___aomod@divisor+7)^0,w,c
  2068  000EFA  5808               	subwfb	(___aomod@dividend+7)^0,w,c
  2069  000EFC  A0D8               	btfss	status,0,c
  2070  000EFE  EF83  F007         	goto	u731
  2071  000F02  EF85  F007         	goto	u730
  2072  000F06                     u731:
  2073  000F06  EF95  F007         	goto	l1357
  2074  000F0A                     u730:
  2075  000F0A  5009               	movf	___aomod@divisor^0,w,c
  2076  000F0C  5E01               	subwf	___aomod@dividend^0,f,c
  2077  000F0E  500A               	movf	(___aomod@divisor+1)^0,w,c
  2078  000F10  5A02               	subwfb	(___aomod@dividend+1)^0,f,c
  2079  000F12  500B               	movf	(___aomod@divisor+2)^0,w,c
  2080  000F14  5A03               	subwfb	(___aomod@dividend+2)^0,f,c
  2081  000F16  500C               	movf	(___aomod@divisor+3)^0,w,c
  2082  000F18  5A04               	subwfb	(___aomod@dividend+3)^0,f,c
  2083  000F1A  500D               	movf	(___aomod@divisor+4)^0,w,c
  2084  000F1C  5A05               	subwfb	(___aomod@dividend+4)^0,f,c
  2085  000F1E  500E               	movf	(___aomod@divisor+5)^0,w,c
  2086  000F20  5A06               	subwfb	(___aomod@dividend+5)^0,f,c
  2087  000F22  500F               	movf	(___aomod@divisor+6)^0,w,c
  2088  000F24  5A07               	subwfb	(___aomod@dividend+6)^0,f,c
  2089  000F26  5010               	movf	(___aomod@divisor+7)^0,w,c
  2090  000F28  5A08               	subwfb	(___aomod@dividend+7)^0,f,c
  2091  000F2A                     l1357:
  2092  000F2A  90D8               	bcf	status,0,c
  2093  000F2C  3210               	rrcf	(___aomod@divisor+7)^0,f,c
  2094  000F2E  320F               	rrcf	(___aomod@divisor+6)^0,f,c
  2095  000F30  320E               	rrcf	(___aomod@divisor+5)^0,f,c
  2096  000F32  320D               	rrcf	(___aomod@divisor+4)^0,f,c
  2097  000F34  320C               	rrcf	(___aomod@divisor+3)^0,f,c
  2098  000F36  320B               	rrcf	(___aomod@divisor+2)^0,f,c
  2099  000F38  320A               	rrcf	(___aomod@divisor+1)^0,f,c
  2100  000F3A  3209               	rrcf	___aomod@divisor^0,f,c
  2101  000F3C  2E11               	decfsz	___aomod@counter^0,f,c
  2102  000F3E  EF6E  F007         	goto	l1353
  2103  000F42                     l1361:
  2104  000F42  5012               	movf	___aomod@sign^0,w,c
  2105  000F44  B4D8               	btfsc	status,2,c
  2106  000F46  EFA7  F007         	goto	u741
  2107  000F4A  EFA9  F007         	goto	u740
  2108  000F4E                     u741:
  2109  000F4E  EFB9  F007         	goto	l1365
  2110  000F52                     u740:
  2111  000F52  1E08               	comf	(___aomod@dividend+7)^0,f,c
  2112  000F54  1E07               	comf	(___aomod@dividend+6)^0,f,c
  2113  000F56  1E06               	comf	(___aomod@dividend+5)^0,f,c
  2114  000F58  1E05               	comf	(___aomod@dividend+4)^0,f,c
  2115  000F5A  1E04               	comf	(___aomod@dividend+3)^0,f,c
  2116  000F5C  1E03               	comf	(___aomod@dividend+2)^0,f,c
  2117  000F5E  1E02               	comf	(___aomod@dividend+1)^0,f,c
  2118  000F60  6C01               	negf	___aomod@dividend^0,c
  2119  000F62  0E00               	movlw	0
  2120  000F64  2202               	addwfc	(___aomod@dividend+1)^0,f,c
  2121  000F66  2203               	addwfc	(___aomod@dividend+2)^0,f,c
  2122  000F68  2204               	addwfc	(___aomod@dividend+3)^0,f,c
  2123  000F6A  2205               	addwfc	(___aomod@dividend+4)^0,f,c
  2124  000F6C  2206               	addwfc	(___aomod@dividend+5)^0,f,c
  2125  000F6E  2207               	addwfc	(___aomod@dividend+6)^0,f,c
  2126  000F70  2208               	addwfc	(___aomod@dividend+7)^0,f,c
  2127  000F72                     l1365:
  2128  000F72  C001  F001         	movff	___aomod@dividend,?___aomod
  2129  000F76  C002  F002         	movff	___aomod@dividend+1,?___aomod+1
  2130  000F7A  C003  F003         	movff	___aomod@dividend+2,?___aomod+2
  2131  000F7E  C004  F004         	movff	___aomod@dividend+3,?___aomod+3
  2132  000F82  C005  F005         	movff	___aomod@dividend+4,?___aomod+4
  2133  000F86  C006  F006         	movff	___aomod@dividend+5,?___aomod+5
  2134  000F8A  C007  F007         	movff	___aomod@dividend+6,?___aomod+6
  2135  000F8E  C008  F008         	movff	___aomod@dividend+7,?___aomod+7
  2136  000F92  0012               	return		;funcret
  2137  000F94                     __end_of___aomod:
  2138                           	opt callstack 0
  2139                           
  2140 ;; *************** function ___aodiv *****************
  2141 ;; Defined at:
  2142 ;;		line 9 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\aodiv.c"
  2143 ;; Parameters:    Size  Location     Type
  2144 ;;  dividend        8    0[COMRAM] long long 
  2145 ;;  divisor         8    8[COMRAM] long long 
  2146 ;; Auto vars:     Size  Location     Type
  2147 ;;  quotient        8   18[COMRAM] long long 
  2148 ;;  sign            1   17[COMRAM] unsigned char 
  2149 ;;  counter         1   16[COMRAM] unsigned char 
  2150 ;; Return value:  Size  Location     Type
  2151 ;;                  8    0[COMRAM] long long 
  2152 ;; Registers used:
  2153 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2154 ;; Tracked objects:
  2155 ;;		On entry : 0/0
  2156 ;;		On exit  : 0/0
  2157 ;;		Unchanged: 0/0
  2158 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2159 ;;      Params:        16       0       0       0       0       0       0       0       0
  2160 ;;      Locals:        10       0       0       0       0       0       0       0       0
  2161 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2162 ;;      Totals:        26       0       0       0       0       0       0       0       0
  2163 ;;Total ram usage:       26 bytes
  2164 ;; Hardware stack levels used:    1
  2165 ;; This function calls:
  2166 ;;		Nothing
  2167 ;; This function is called by:
  2168 ;;		_dtoa
  2169 ;; This function uses a non-reentrant model
  2170 ;;
  2171                           
  2172                           	psect	text12
  2173  000CA8                     __ptext12:
  2174                           	opt callstack 0
  2175  000CA8                     ___aodiv:
  2176                           	opt callstack 26
  2177  000CA8  0E00               	movlw	0
  2178  000CAA  6E12               	movwf	___aodiv@sign^0,c
  2179  000CAC  BE10               	btfsc	(___aodiv@divisor+7)^0,7,c
  2180  000CAE  EF5D  F006         	goto	u620
  2181  000CB2  EF5B  F006         	goto	u621
  2182  000CB6                     u621:
  2183  000CB6  EF6F  F006         	goto	l1297
  2184  000CBA                     u620:
  2185  000CBA  1E10               	comf	(___aodiv@divisor+7)^0,f,c
  2186  000CBC  1E0F               	comf	(___aodiv@divisor+6)^0,f,c
  2187  000CBE  1E0E               	comf	(___aodiv@divisor+5)^0,f,c
  2188  000CC0  1E0D               	comf	(___aodiv@divisor+4)^0,f,c
  2189  000CC2  1E0C               	comf	(___aodiv@divisor+3)^0,f,c
  2190  000CC4  1E0B               	comf	(___aodiv@divisor+2)^0,f,c
  2191  000CC6  1E0A               	comf	(___aodiv@divisor+1)^0,f,c
  2192  000CC8  6C09               	negf	___aodiv@divisor^0,c
  2193  000CCA  0E00               	movlw	0
  2194  000CCC  220A               	addwfc	(___aodiv@divisor+1)^0,f,c
  2195  000CCE  220B               	addwfc	(___aodiv@divisor+2)^0,f,c
  2196  000CD0  220C               	addwfc	(___aodiv@divisor+3)^0,f,c
  2197  000CD2  220D               	addwfc	(___aodiv@divisor+4)^0,f,c
  2198  000CD4  220E               	addwfc	(___aodiv@divisor+5)^0,f,c
  2199  000CD6  220F               	addwfc	(___aodiv@divisor+6)^0,f,c
  2200  000CD8  2210               	addwfc	(___aodiv@divisor+7)^0,f,c
  2201  000CDA  0E01               	movlw	1
  2202  000CDC  6E12               	movwf	___aodiv@sign^0,c
  2203  000CDE                     l1297:
  2204  000CDE  BE08               	btfsc	(___aodiv@dividend+7)^0,7,c
  2205  000CE0  EF76  F006         	goto	u630
  2206  000CE4  EF74  F006         	goto	u631
  2207  000CE8                     u631:
  2208  000CE8  EF88  F006         	goto	l1303
  2209  000CEC                     u630:
  2210  000CEC  1E08               	comf	(___aodiv@dividend+7)^0,f,c
  2211  000CEE  1E07               	comf	(___aodiv@dividend+6)^0,f,c
  2212  000CF0  1E06               	comf	(___aodiv@dividend+5)^0,f,c
  2213  000CF2  1E05               	comf	(___aodiv@dividend+4)^0,f,c
  2214  000CF4  1E04               	comf	(___aodiv@dividend+3)^0,f,c
  2215  000CF6  1E03               	comf	(___aodiv@dividend+2)^0,f,c
  2216  000CF8  1E02               	comf	(___aodiv@dividend+1)^0,f,c
  2217  000CFA  6C01               	negf	___aodiv@dividend^0,c
  2218  000CFC  0E00               	movlw	0
  2219  000CFE  2202               	addwfc	(___aodiv@dividend+1)^0,f,c
  2220  000D00  2203               	addwfc	(___aodiv@dividend+2)^0,f,c
  2221  000D02  2204               	addwfc	(___aodiv@dividend+3)^0,f,c
  2222  000D04  2205               	addwfc	(___aodiv@dividend+4)^0,f,c
  2223  000D06  2206               	addwfc	(___aodiv@dividend+5)^0,f,c
  2224  000D08  2207               	addwfc	(___aodiv@dividend+6)^0,f,c
  2225  000D0A  2208               	addwfc	(___aodiv@dividend+7)^0,f,c
  2226  000D0C  0E01               	movlw	1
  2227  000D0E  1A12               	xorwf	___aodiv@sign^0,f,c
  2228  000D10                     l1303:
  2229  000D10  EE20  F013         	lfsr	2,___aodiv@quotient
  2230  000D14  0E07               	movlw	7
  2231  000D16                     u641:
  2232  000D16  6ADE               	clrf	postinc2,c
  2233  000D18  06E8               	decf	wreg,f,c
  2234  000D1A  E2FD               	bc	u641
  2235  000D1C  5009               	movf	___aodiv@divisor^0,w,c
  2236  000D1E  100A               	iorwf	(___aodiv@divisor+1)^0,w,c
  2237  000D20  100B               	iorwf	(___aodiv@divisor+2)^0,w,c
  2238  000D22  100C               	iorwf	(___aodiv@divisor+3)^0,w,c
  2239  000D24  100D               	iorwf	(___aodiv@divisor+4)^0,w,c
  2240  000D26  100E               	iorwf	(___aodiv@divisor+5)^0,w,c
  2241  000D28  100F               	iorwf	(___aodiv@divisor+6)^0,w,c
  2242  000D2A  1010               	iorwf	(___aodiv@divisor+7)^0,w,c
  2243  000D2C  B4D8               	btfsc	status,2,c
  2244  000D2E  EF9B  F006         	goto	u651
  2245  000D32  EF9D  F006         	goto	u650
  2246  000D36                     u651:
  2247  000D36  EFEF  F006         	goto	l1325
  2248  000D3A                     u650:
  2249  000D3A  0E01               	movlw	1
  2250  000D3C  6E11               	movwf	___aodiv@counter^0,c
  2251  000D3E  EFAB  F006         	goto	l1311
  2252  000D42                     l1309:
  2253  000D42  90D8               	bcf	status,0,c
  2254  000D44  3609               	rlcf	___aodiv@divisor^0,f,c
  2255  000D46  360A               	rlcf	(___aodiv@divisor+1)^0,f,c
  2256  000D48  360B               	rlcf	(___aodiv@divisor+2)^0,f,c
  2257  000D4A  360C               	rlcf	(___aodiv@divisor+3)^0,f,c
  2258  000D4C  360D               	rlcf	(___aodiv@divisor+4)^0,f,c
  2259  000D4E  360E               	rlcf	(___aodiv@divisor+5)^0,f,c
  2260  000D50  360F               	rlcf	(___aodiv@divisor+6)^0,f,c
  2261  000D52  3610               	rlcf	(___aodiv@divisor+7)^0,f,c
  2262  000D54  2A11               	incf	___aodiv@counter^0,f,c
  2263  000D56                     l1311:
  2264  000D56  AE10               	btfss	(___aodiv@divisor+7)^0,7,c
  2265  000D58  EFB0  F006         	goto	u661
  2266  000D5C  EFB2  F006         	goto	u660
  2267  000D60                     u661:
  2268  000D60  EFA1  F006         	goto	l1309
  2269  000D64                     u660:
  2270  000D64                     l1313:
  2271  000D64  90D8               	bcf	status,0,c
  2272  000D66  3613               	rlcf	___aodiv@quotient^0,f,c
  2273  000D68  3614               	rlcf	(___aodiv@quotient+1)^0,f,c
  2274  000D6A  3615               	rlcf	(___aodiv@quotient+2)^0,f,c
  2275  000D6C  3616               	rlcf	(___aodiv@quotient+3)^0,f,c
  2276  000D6E  3617               	rlcf	(___aodiv@quotient+4)^0,f,c
  2277  000D70  3618               	rlcf	(___aodiv@quotient+5)^0,f,c
  2278  000D72  3619               	rlcf	(___aodiv@quotient+6)^0,f,c
  2279  000D74  361A               	rlcf	(___aodiv@quotient+7)^0,f,c
  2280  000D76  5009               	movf	___aodiv@divisor^0,w,c
  2281  000D78  5C01               	subwf	___aodiv@dividend^0,w,c
  2282  000D7A  500A               	movf	(___aodiv@divisor+1)^0,w,c
  2283  000D7C  5802               	subwfb	(___aodiv@dividend+1)^0,w,c
  2284  000D7E  500B               	movf	(___aodiv@divisor+2)^0,w,c
  2285  000D80  5803               	subwfb	(___aodiv@dividend+2)^0,w,c
  2286  000D82  500C               	movf	(___aodiv@divisor+3)^0,w,c
  2287  000D84  5804               	subwfb	(___aodiv@dividend+3)^0,w,c
  2288  000D86  500D               	movf	(___aodiv@divisor+4)^0,w,c
  2289  000D88  5805               	subwfb	(___aodiv@dividend+4)^0,w,c
  2290  000D8A  500E               	movf	(___aodiv@divisor+5)^0,w,c
  2291  000D8C  5806               	subwfb	(___aodiv@dividend+5)^0,w,c
  2292  000D8E  500F               	movf	(___aodiv@divisor+6)^0,w,c
  2293  000D90  5807               	subwfb	(___aodiv@dividend+6)^0,w,c
  2294  000D92  5010               	movf	(___aodiv@divisor+7)^0,w,c
  2295  000D94  5808               	subwfb	(___aodiv@dividend+7)^0,w,c
  2296  000D96  A0D8               	btfss	status,0,c
  2297  000D98  EFD0  F006         	goto	u671
  2298  000D9C  EFD2  F006         	goto	u670
  2299  000DA0                     u671:
  2300  000DA0  EFE3  F006         	goto	l1321
  2301  000DA4                     u670:
  2302  000DA4  5009               	movf	___aodiv@divisor^0,w,c
  2303  000DA6  5E01               	subwf	___aodiv@dividend^0,f,c
  2304  000DA8  500A               	movf	(___aodiv@divisor+1)^0,w,c
  2305  000DAA  5A02               	subwfb	(___aodiv@dividend+1)^0,f,c
  2306  000DAC  500B               	movf	(___aodiv@divisor+2)^0,w,c
  2307  000DAE  5A03               	subwfb	(___aodiv@dividend+2)^0,f,c
  2308  000DB0  500C               	movf	(___aodiv@divisor+3)^0,w,c
  2309  000DB2  5A04               	subwfb	(___aodiv@dividend+3)^0,f,c
  2310  000DB4  500D               	movf	(___aodiv@divisor+4)^0,w,c
  2311  000DB6  5A05               	subwfb	(___aodiv@dividend+4)^0,f,c
  2312  000DB8  500E               	movf	(___aodiv@divisor+5)^0,w,c
  2313  000DBA  5A06               	subwfb	(___aodiv@dividend+5)^0,f,c
  2314  000DBC  500F               	movf	(___aodiv@divisor+6)^0,w,c
  2315  000DBE  5A07               	subwfb	(___aodiv@dividend+6)^0,f,c
  2316  000DC0  5010               	movf	(___aodiv@divisor+7)^0,w,c
  2317  000DC2  5A08               	subwfb	(___aodiv@dividend+7)^0,f,c
  2318  000DC4  8013               	bsf	___aodiv@quotient^0,0,c
  2319  000DC6                     l1321:
  2320  000DC6  90D8               	bcf	status,0,c
  2321  000DC8  3210               	rrcf	(___aodiv@divisor+7)^0,f,c
  2322  000DCA  320F               	rrcf	(___aodiv@divisor+6)^0,f,c
  2323  000DCC  320E               	rrcf	(___aodiv@divisor+5)^0,f,c
  2324  000DCE  320D               	rrcf	(___aodiv@divisor+4)^0,f,c
  2325  000DD0  320C               	rrcf	(___aodiv@divisor+3)^0,f,c
  2326  000DD2  320B               	rrcf	(___aodiv@divisor+2)^0,f,c
  2327  000DD4  320A               	rrcf	(___aodiv@divisor+1)^0,f,c
  2328  000DD6  3209               	rrcf	___aodiv@divisor^0,f,c
  2329  000DD8  2E11               	decfsz	___aodiv@counter^0,f,c
  2330  000DDA  EFB2  F006         	goto	l1313
  2331  000DDE                     l1325:
  2332  000DDE  5012               	movf	___aodiv@sign^0,w,c
  2333  000DE0  B4D8               	btfsc	status,2,c
  2334  000DE2  EFF5  F006         	goto	u681
  2335  000DE6  EFF7  F006         	goto	u680
  2336  000DEA                     u681:
  2337  000DEA  EF07  F007         	goto	l1329
  2338  000DEE                     u680:
  2339  000DEE  1E1A               	comf	(___aodiv@quotient+7)^0,f,c
  2340  000DF0  1E19               	comf	(___aodiv@quotient+6)^0,f,c
  2341  000DF2  1E18               	comf	(___aodiv@quotient+5)^0,f,c
  2342  000DF4  1E17               	comf	(___aodiv@quotient+4)^0,f,c
  2343  000DF6  1E16               	comf	(___aodiv@quotient+3)^0,f,c
  2344  000DF8  1E15               	comf	(___aodiv@quotient+2)^0,f,c
  2345  000DFA  1E14               	comf	(___aodiv@quotient+1)^0,f,c
  2346  000DFC  6C13               	negf	___aodiv@quotient^0,c
  2347  000DFE  0E00               	movlw	0
  2348  000E00  2214               	addwfc	(___aodiv@quotient+1)^0,f,c
  2349  000E02  2215               	addwfc	(___aodiv@quotient+2)^0,f,c
  2350  000E04  2216               	addwfc	(___aodiv@quotient+3)^0,f,c
  2351  000E06  2217               	addwfc	(___aodiv@quotient+4)^0,f,c
  2352  000E08  2218               	addwfc	(___aodiv@quotient+5)^0,f,c
  2353  000E0A  2219               	addwfc	(___aodiv@quotient+6)^0,f,c
  2354  000E0C  221A               	addwfc	(___aodiv@quotient+7)^0,f,c
  2355  000E0E                     l1329:
  2356  000E0E  C013  F001         	movff	___aodiv@quotient,?___aodiv
  2357  000E12  C014  F002         	movff	___aodiv@quotient+1,?___aodiv+1
  2358  000E16  C015  F003         	movff	___aodiv@quotient+2,?___aodiv+2
  2359  000E1A  C016  F004         	movff	___aodiv@quotient+3,?___aodiv+3
  2360  000E1E  C017  F005         	movff	___aodiv@quotient+4,?___aodiv+4
  2361  000E22  C018  F006         	movff	___aodiv@quotient+5,?___aodiv+5
  2362  000E26  C019  F007         	movff	___aodiv@quotient+6,?___aodiv+6
  2363  000E2A  C01A  F008         	movff	___aodiv@quotient+7,?___aodiv+7
  2364  000E2E  0012               	return		;funcret
  2365  000E30                     __end_of___aodiv:
  2366                           	opt callstack 0
  2367                           
  2368 ;; *************** function _Lcd_Out *****************
  2369 ;; Defined at:
  2370 ;;		line 122 in file "./Lcd.h"
  2371 ;; Parameters:    Size  Location     Type
  2372 ;;  y               2   11[COMRAM] int 
  2373 ;;  x               2   13[COMRAM] int 
  2374 ;;  mensaje         2   15[COMRAM] PTR unsigned char 
  2375 ;;		 -> aux(20), STR_1(7), 
  2376 ;; Auto vars:     Size  Location     Type
  2377 ;;  cursor          2   17[COMRAM] int 
  2378 ;; Return value:  Size  Location     Type
  2379 ;;                  1    wreg      void 
  2380 ;; Registers used:
  2381 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2382 ;; Tracked objects:
  2383 ;;		On entry : 0/0
  2384 ;;		On exit  : 0/0
  2385 ;;		Unchanged: 0/0
  2386 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2387 ;;      Params:         6       0       0       0       0       0       0       0       0
  2388 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2389 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2390 ;;      Totals:         8       0       0       0       0       0       0       0       0
  2391 ;;Total ram usage:        8 bytes
  2392 ;; Hardware stack levels used:    1
  2393 ;; Hardware stack levels required when called:    3
  2394 ;; This function calls:
  2395 ;;		_Lcd_Chr_Cp
  2396 ;;		_Lcd_Cmd
  2397 ;;		_set_Cursor
  2398 ;; This function is called by:
  2399 ;;		_main
  2400 ;; This function uses a non-reentrant model
  2401 ;;
  2402                           
  2403                           	psect	text13
  2404  0014AA                     __ptext13:
  2405                           	opt callstack 0
  2406  0014AA                     _Lcd_Out:
  2407                           	opt callstack 27
  2408  0014AA                     
  2409                           ;./Lcd.h: 123:     int cursor=set_Cursor(y,x);
  2410  0014AA  C00C  F001         	movff	Lcd_Out@y,set_Cursor@y
  2411  0014AE  C00D  F002         	movff	Lcd_Out@y+1,set_Cursor@y+1
  2412  0014B2  C00E  F003         	movff	Lcd_Out@x,set_Cursor@x
  2413  0014B6  C00F  F004         	movff	Lcd_Out@x+1,set_Cursor@x+1
  2414  0014BA  EC10  F00A         	call	_set_Cursor	;wreg free
  2415  0014BE  C001  F012         	movff	?_set_Cursor,Lcd_Out@cursor
  2416  0014C2  C002  F013         	movff	?_set_Cursor+1,Lcd_Out@cursor+1
  2417                           
  2418                           ;./Lcd.h: 124:     Lcd_Cmd(cursor);
  2419  0014C6  5012               	movf	Lcd_Out@cursor^0,w,c
  2420  0014C8  ECEC  F008         	call	_Lcd_Cmd
  2421                           
  2422                           ;./Lcd.h: 125:     while(*mensaje){
  2423  0014CC  EF7C  F00A         	goto	l1557
  2424  0014D0                     l1553:
  2425                           
  2426                           ;./Lcd.h: 126:         Lcd_Chr_Cp(*mensaje);
  2427  0014D0  C010  FFF6         	movff	Lcd_Out@mensaje,tblptrl
  2428  0014D4  C011  FFF7         	movff	Lcd_Out@mensaje+1,tblptrh
  2429  0014D8  6AF8               	clrf	tblptru,c
  2430  0014DA  0E07               	movlw	(high __ramtop+-1)
  2431  0014DC  64F7               	cpfsgt	tblptrh,c
  2432  0014DE  D003               	bra	u977
  2433  0014E0  0008               	tblrd		*
  2434  0014E2  50F5               	movf	tablat,w,c
  2435  0014E4  D005               	bra	u970
  2436  0014E6                     u977:
  2437  0014E6  CFF6 FFE1          	movff	tblptrl,fsr1l
  2438  0014EA  CFF7 FFE2          	movff	tblptrh,fsr1h
  2439  0014EE  50E7               	movf	indf1,w,c
  2440  0014F0                     u970:
  2441  0014F0  EC36  F009         	call	_Lcd_Chr_Cp
  2442  0014F4                     
  2443                           ;./Lcd.h: 127:         mensaje++;
  2444  0014F4  4A10               	infsnz	Lcd_Out@mensaje^0,f,c
  2445  0014F6  2A11               	incf	(Lcd_Out@mensaje+1)^0,f,c
  2446  0014F8                     l1557:
  2447                           
  2448                           ;./Lcd.h: 125:     while(*mensaje){
  2449  0014F8  C010  FFF6         	movff	Lcd_Out@mensaje,tblptrl
  2450  0014FC  C011  FFF7         	movff	Lcd_Out@mensaje+1,tblptrh
  2451  001500  6AF8               	clrf	tblptru,c
  2452  001502  0E07               	movlw	(high __ramtop+-1)
  2453  001504  64F7               	cpfsgt	tblptrh,c
  2454  001506  D003               	bra	u987
  2455  001508  0008               	tblrd		*
  2456  00150A  50F5               	movf	tablat,w,c
  2457  00150C  D005               	bra	u980
  2458  00150E                     u987:
  2459  00150E  CFF6 FFE1          	movff	tblptrl,fsr1l
  2460  001512  CFF7 FFE2          	movff	tblptrh,fsr1h
  2461  001516  50E7               	movf	indf1,w,c
  2462  001518                     u980:
  2463  001518  0900               	iorlw	0
  2464  00151A  A4D8               	btfss	status,2,c
  2465  00151C  EF92  F00A         	goto	u991
  2466  001520  EF94  F00A         	goto	u990
  2467  001524                     u991:
  2468  001524  EF68  F00A         	goto	l1553
  2469  001528                     u990:
  2470  001528  0012               	return		;funcret
  2471  00152A                     __end_of_Lcd_Out:
  2472                           	opt callstack 0
  2473                           
  2474 ;; *************** function _set_Cursor *****************
  2475 ;; Defined at:
  2476 ;;		line 149 in file "./Lcd.h"
  2477 ;; Parameters:    Size  Location     Type
  2478 ;;  y               2    0[COMRAM] int 
  2479 ;;  x               2    2[COMRAM] int 
  2480 ;; Auto vars:     Size  Location     Type
  2481 ;;  data            2    6[COMRAM] unsigned int 
  2482 ;; Return value:  Size  Location     Type
  2483 ;;                  2    0[COMRAM] int 
  2484 ;; Registers used:
  2485 ;;		wreg, status,2, status,0
  2486 ;; Tracked objects:
  2487 ;;		On entry : 0/0
  2488 ;;		On exit  : 0/0
  2489 ;;		Unchanged: 0/0
  2490 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2491 ;;      Params:         4       0       0       0       0       0       0       0       0
  2492 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2493 ;;      Temps:          2       0       0       0       0       0       0       0       0
  2494 ;;      Totals:         8       0       0       0       0       0       0       0       0
  2495 ;;Total ram usage:        8 bytes
  2496 ;; Hardware stack levels used:    1
  2497 ;; This function calls:
  2498 ;;		Nothing
  2499 ;; This function is called by:
  2500 ;;		_Lcd_Out
  2501 ;;		_Lcd_Chr
  2502 ;; This function uses a non-reentrant model
  2503 ;;
  2504                           
  2505                           	psect	text14
  2506  001420                     __ptext14:
  2507                           	opt callstack 0
  2508  001420                     _set_Cursor:
  2509                           	opt callstack 29
  2510  001420                     
  2511                           ;./Lcd.h: 150:     unsigned int data;;./Lcd.h: 151:     switch (y)
  2512  001420  EF32  F00A         	goto	l1525
  2513  001424                     l1515:
  2514  001424  0E7F               	movlw	127
  2515  001426  2403               	addwf	set_Cursor@x^0,w,c
  2516  001428  6E07               	movwf	set_Cursor@data^0,c
  2517  00142A  0E00               	movlw	0
  2518  00142C  2004               	addwfc	(set_Cursor@x+1)^0,w,c
  2519  00142E  6E08               	movwf	(set_Cursor@data+1)^0,c
  2520  001430  EF50  F00A         	goto	l49
  2521  001434                     l1517:
  2522  001434  0EBF               	movlw	191
  2523  001436  2403               	addwf	set_Cursor@x^0,w,c
  2524  001438  6E07               	movwf	set_Cursor@data^0,c
  2525  00143A  0E00               	movlw	0
  2526  00143C  2004               	addwfc	(set_Cursor@x+1)^0,w,c
  2527  00143E  6E08               	movwf	(set_Cursor@data+1)^0,c
  2528  001440  EF50  F00A         	goto	l49
  2529  001444                     l1519:
  2530  001444  0E93               	movlw	147
  2531  001446  2403               	addwf	set_Cursor@x^0,w,c
  2532  001448  6E07               	movwf	set_Cursor@data^0,c
  2533  00144A  0E00               	movlw	0
  2534  00144C  2004               	addwfc	(set_Cursor@x+1)^0,w,c
  2535  00144E  6E08               	movwf	(set_Cursor@data+1)^0,c
  2536  001450  EF50  F00A         	goto	l49
  2537  001454                     l1521:
  2538  001454  0ED3               	movlw	211
  2539  001456  2403               	addwf	set_Cursor@x^0,w,c
  2540  001458  6E07               	movwf	set_Cursor@data^0,c
  2541  00145A  0E00               	movlw	0
  2542  00145C  2004               	addwfc	(set_Cursor@x+1)^0,w,c
  2543  00145E  6E08               	movwf	(set_Cursor@data+1)^0,c
  2544  001460  EF50  F00A         	goto	l49
  2545  001464                     l1525:
  2546  001464  C001  F005         	movff	set_Cursor@y,??_set_Cursor
  2547  001468  C002  F006         	movff	set_Cursor@y+1,??_set_Cursor+1
  2548                           
  2549                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2550                           ; Switch size 1, requested type "simple"
  2551                           ; Number of cases is 1, Range of values is 0 to 0
  2552                           ; switch strategies available:
  2553                           ; Name         Instructions Cycles
  2554                           ; simple_byte            4     3 (average)
  2555                           ;	Chosen strategy is simple_byte
  2556  00146C  5006               	movf	(??_set_Cursor+1)^0,w,c
  2557  00146E  0A00               	xorlw	0	; case 0
  2558  001470  B4D8               	btfsc	status,2,c
  2559  001472  EF3D  F00A         	goto	l1621
  2560  001476  EF50  F00A         	goto	l49
  2561  00147A                     l1621:
  2562                           
  2563                           ; Switch size 1, requested type "simple"
  2564                           ; Number of cases is 4, Range of values is 1 to 4
  2565                           ; switch strategies available:
  2566                           ; Name         Instructions Cycles
  2567                           ; simple_byte           13     7 (average)
  2568                           ;	Chosen strategy is simple_byte
  2569  00147A  5005               	movf	??_set_Cursor^0,w,c
  2570  00147C  0A01               	xorlw	1	; case 1
  2571  00147E  B4D8               	btfsc	status,2,c
  2572  001480  EF12  F00A         	goto	l1515
  2573  001484  0A03               	xorlw	3	; case 2
  2574  001486  B4D8               	btfsc	status,2,c
  2575  001488  EF1A  F00A         	goto	l1517
  2576  00148C  0A01               	xorlw	1	; case 3
  2577  00148E  B4D8               	btfsc	status,2,c
  2578  001490  EF22  F00A         	goto	l1519
  2579  001494  0A07               	xorlw	7	; case 4
  2580  001496  B4D8               	btfsc	status,2,c
  2581  001498  EF2A  F00A         	goto	l1521
  2582  00149C  EF50  F00A         	goto	l49
  2583  0014A0                     l49:
  2584                           
  2585                           ;./Lcd.h: 159:     return data;
  2586  0014A0  C007  F001         	movff	set_Cursor@data,?_set_Cursor
  2587  0014A4  C008  F002         	movff	set_Cursor@data+1,?_set_Cursor+1
  2588  0014A8  0012               	return		;funcret
  2589  0014AA                     __end_of_set_Cursor:
  2590                           	opt callstack 0
  2591                           
  2592 ;; *************** function _Lcd_Cmd *****************
  2593 ;; Defined at:
  2594 ;;		line 108 in file "./Lcd.h"
  2595 ;; Parameters:    Size  Location     Type
  2596 ;;  comando         1    wreg     unsigned char 
  2597 ;; Auto vars:     Size  Location     Type
  2598 ;;  comando         1   10[COMRAM] unsigned char 
  2599 ;;  valor_palabr    2    8[COMRAM] int 
  2600 ;; Return value:  Size  Location     Type
  2601 ;;                  1    wreg      void 
  2602 ;; Registers used:
  2603 ;;		wreg, status,2, status,0, cstack
  2604 ;; Tracked objects:
  2605 ;;		On entry : 0/0
  2606 ;;		On exit  : 0/0
  2607 ;;		Unchanged: 0/0
  2608 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2609 ;;      Params:         0       0       0       0       0       0       0       0       0
  2610 ;;      Locals:         3       0       0       0       0       0       0       0       0
  2611 ;;      Temps:          4       0       0       0       0       0       0       0       0
  2612 ;;      Totals:         7       0       0       0       0       0       0       0       0
  2613 ;;Total ram usage:        7 bytes
  2614 ;; Hardware stack levels used:    1
  2615 ;; Hardware stack levels required when called:    2
  2616 ;; This function calls:
  2617 ;;		_set_valor
  2618 ;; This function is called by:
  2619 ;;		_Lcd_Out
  2620 ;;		_main
  2621 ;;		_Lcd_Chr
  2622 ;; This function uses a non-reentrant model
  2623 ;;
  2624                           
  2625                           	psect	text15
  2626  0011D8                     __ptext15:
  2627                           	opt callstack 0
  2628  0011D8                     _Lcd_Cmd:
  2629                           	opt callstack 27
  2630                           
  2631                           ;incstack = 0
  2632                           ;Lcd_Cmd@comando stored from wreg
  2633  0011D8  6E0B               	movwf	Lcd_Cmd@comando^0,c
  2634  0011DA                     
  2635                           ;./Lcd.h: 109:     int valor_palabra;;./Lcd.h: 110:     PORTDbits.RD0 = 0;
  2636  0011DA  9083               	bcf	131,0,c	;volatile
  2637                           
  2638                           ;./Lcd.h: 111:     PORTDbits.RD1=0;
  2639  0011DC  9283               	bcf	131,1,c	;volatile
  2640  0011DE                     
  2641                           ;./Lcd.h: 112:     valor_palabra=(comando & 0b10000000)|(comando & 0b01000000)|
  2642  0011DE  C00B  F005         	movff	Lcd_Cmd@comando,??_Lcd_Cmd
  2643  0011E2  0E10               	movlw	16
  2644  0011E4  1605               	andwf	??_Lcd_Cmd^0,f,c
  2645  0011E6  C00B  F006         	movff	Lcd_Cmd@comando,??_Lcd_Cmd+1
  2646  0011EA  0E20               	movlw	32
  2647  0011EC  1606               	andwf	(??_Lcd_Cmd+1)^0,f,c
  2648  0011EE  C00B  F007         	movff	Lcd_Cmd@comando,??_Lcd_Cmd+2
  2649  0011F2  0E40               	movlw	64
  2650  0011F4  1607               	andwf	(??_Lcd_Cmd+2)^0,f,c
  2651  0011F6  500B               	movf	Lcd_Cmd@comando^0,w,c
  2652  0011F8  0B80               	andlw	128
  2653  0011FA  1007               	iorwf	(??_Lcd_Cmd+2)^0,w,c
  2654  0011FC  1006               	iorwf	(??_Lcd_Cmd+1)^0,w,c
  2655  0011FE  1005               	iorwf	??_Lcd_Cmd^0,w,c
  2656  001200  6E08               	movwf	(??_Lcd_Cmd+3)^0,c
  2657  001202  5008               	movf	(??_Lcd_Cmd+3)^0,w,c
  2658  001204  6E09               	movwf	Lcd_Cmd@valor_palabra^0,c
  2659  001206  6A0A               	clrf	(Lcd_Cmd@valor_palabra+1)^0,c
  2660  001208                     
  2661                           ;./Lcd.h: 114:     set_valor((valor_palabra>>4));
  2662  001208  C009  F005         	movff	Lcd_Cmd@valor_palabra,??_Lcd_Cmd
  2663  00120C  C00A  F006         	movff	Lcd_Cmd@valor_palabra+1,??_Lcd_Cmd+1
  2664  001210  0E04               	movlw	4
  2665  001212  6E07               	movwf	(??_Lcd_Cmd+2)^0,c
  2666  001214                     u955:
  2667  001214  3406               	rlcf	(??_Lcd_Cmd+1)^0,w,c
  2668  001216  3206               	rrcf	(??_Lcd_Cmd+1)^0,f,c
  2669  001218  3205               	rrcf	??_Lcd_Cmd^0,f,c
  2670  00121A  2E07               	decfsz	(??_Lcd_Cmd+2)^0,f,c
  2671  00121C  EF0A  F009         	goto	u955
  2672  001220  C005  F001         	movff	??_Lcd_Cmd,set_valor@valor_comando
  2673  001224  C006  F002         	movff	??_Lcd_Cmd+1,set_valor@valor_comando+1
  2674  001228  EC80  F009         	call	_set_valor	;wreg free
  2675  00122C                     
  2676                           ;./Lcd.h: 115:     valor_palabra=(comando & 0b00001000)|(comando & 0b00000100)|
  2677  00122C  C00B  F005         	movff	Lcd_Cmd@comando,??_Lcd_Cmd
  2678  001230  0E01               	movlw	1
  2679  001232  1605               	andwf	??_Lcd_Cmd^0,f,c
  2680  001234  C00B  F006         	movff	Lcd_Cmd@comando,??_Lcd_Cmd+1
  2681  001238  0E02               	movlw	2
  2682  00123A  1606               	andwf	(??_Lcd_Cmd+1)^0,f,c
  2683  00123C  C00B  F007         	movff	Lcd_Cmd@comando,??_Lcd_Cmd+2
  2684  001240  0E04               	movlw	4
  2685  001242  1607               	andwf	(??_Lcd_Cmd+2)^0,f,c
  2686  001244  500B               	movf	Lcd_Cmd@comando^0,w,c
  2687  001246  0B08               	andlw	8
  2688  001248  1007               	iorwf	(??_Lcd_Cmd+2)^0,w,c
  2689  00124A  1006               	iorwf	(??_Lcd_Cmd+1)^0,w,c
  2690  00124C  1005               	iorwf	??_Lcd_Cmd^0,w,c
  2691  00124E  6E08               	movwf	(??_Lcd_Cmd+3)^0,c
  2692  001250  5008               	movf	(??_Lcd_Cmd+3)^0,w,c
  2693  001252  6E09               	movwf	Lcd_Cmd@valor_palabra^0,c
  2694  001254  6A0A               	clrf	(Lcd_Cmd@valor_palabra+1)^0,c
  2695                           
  2696                           ;./Lcd.h: 117:     set_valor(valor_palabra);
  2697  001256  C009  F001         	movff	Lcd_Cmd@valor_palabra,set_valor@valor_comando
  2698  00125A  C00A  F002         	movff	Lcd_Cmd@valor_palabra+1,set_valor@valor_comando+1
  2699  00125E  EC80  F009         	call	_set_valor	;wreg free
  2700  001262                     
  2701                           ;./Lcd.h: 118:      _delay((unsigned long)((100)*(4000000L/4000000.0)));
  2702  001262  0E21               	movlw	33
  2703  001264                     u1027:
  2704  001264  2EE8               	decfsz	wreg,f,c
  2705  001266  D7FE               	bra	u1027
  2706  001268  F000               	nop	
  2707  00126A  0012               	return		;funcret
  2708  00126C                     __end_of_Lcd_Cmd:
  2709                           	opt callstack 0
  2710                           
  2711 ;; *************** function _Lcd_Chr_Cp *****************
  2712 ;; Defined at:
  2713 ;;		line 96 in file "./Lcd.h"
  2714 ;; Parameters:    Size  Location     Type
  2715 ;;  mensaje         1    wreg     unsigned char 
  2716 ;; Auto vars:     Size  Location     Type
  2717 ;;  mensaje         1   10[COMRAM] unsigned char 
  2718 ;;  valor_palabr    2    8[COMRAM] int 
  2719 ;; Return value:  Size  Location     Type
  2720 ;;                  1    wreg      void 
  2721 ;; Registers used:
  2722 ;;		wreg, status,2, status,0, cstack
  2723 ;; Tracked objects:
  2724 ;;		On entry : 0/0
  2725 ;;		On exit  : 0/0
  2726 ;;		Unchanged: 0/0
  2727 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2728 ;;      Params:         0       0       0       0       0       0       0       0       0
  2729 ;;      Locals:         3       0       0       0       0       0       0       0       0
  2730 ;;      Temps:          4       0       0       0       0       0       0       0       0
  2731 ;;      Totals:         7       0       0       0       0       0       0       0       0
  2732 ;;Total ram usage:        7 bytes
  2733 ;; Hardware stack levels used:    1
  2734 ;; Hardware stack levels required when called:    2
  2735 ;; This function calls:
  2736 ;;		_set_valor
  2737 ;; This function is called by:
  2738 ;;		_Lcd_Out
  2739 ;;		_Lcd_Out_Cp
  2740 ;;		_Lcd_Chr
  2741 ;; This function uses a non-reentrant model
  2742 ;;
  2743                           
  2744                           	psect	text16
  2745  00126C                     __ptext16:
  2746                           	opt callstack 0
  2747  00126C                     _Lcd_Chr_Cp:
  2748                           	opt callstack 27
  2749                           
  2750                           ;incstack = 0
  2751                           ;Lcd_Chr_Cp@mensaje stored from wreg
  2752  00126C  6E0B               	movwf	Lcd_Chr_Cp@mensaje^0,c
  2753  00126E                     
  2754                           ;./Lcd.h: 97:     int valor_palabra;;./Lcd.h: 98:     PORTDbits.RD0 = 1;
  2755  00126E  8083               	bsf	131,0,c	;volatile
  2756                           
  2757                           ;./Lcd.h: 99:     PORTDbits.RD1=0;
  2758  001270  9283               	bcf	131,1,c	;volatile
  2759  001272                     
  2760                           ;./Lcd.h: 100:     valor_palabra=(mensaje & 0b10000000)|(mensaje & 0b01000000)|(mensaje 
      +                          & 0b00100000)|(mensaje & 0b00010000);
  2761  001272  C00B  F005         	movff	Lcd_Chr_Cp@mensaje,??_Lcd_Chr_Cp
  2762  001276  0E10               	movlw	16
  2763  001278  1605               	andwf	??_Lcd_Chr_Cp^0,f,c
  2764  00127A  C00B  F006         	movff	Lcd_Chr_Cp@mensaje,??_Lcd_Chr_Cp+1
  2765  00127E  0E20               	movlw	32
  2766  001280  1606               	andwf	(??_Lcd_Chr_Cp+1)^0,f,c
  2767  001282  C00B  F007         	movff	Lcd_Chr_Cp@mensaje,??_Lcd_Chr_Cp+2
  2768  001286  0E40               	movlw	64
  2769  001288  1607               	andwf	(??_Lcd_Chr_Cp+2)^0,f,c
  2770  00128A  500B               	movf	Lcd_Chr_Cp@mensaje^0,w,c
  2771  00128C  0B80               	andlw	128
  2772  00128E  1007               	iorwf	(??_Lcd_Chr_Cp+2)^0,w,c
  2773  001290  1006               	iorwf	(??_Lcd_Chr_Cp+1)^0,w,c
  2774  001292  1005               	iorwf	??_Lcd_Chr_Cp^0,w,c
  2775  001294  6E08               	movwf	(??_Lcd_Chr_Cp+3)^0,c
  2776  001296  5008               	movf	(??_Lcd_Chr_Cp+3)^0,w,c
  2777  001298  6E09               	movwf	Lcd_Chr_Cp@valor_palabra^0,c
  2778  00129A  6A0A               	clrf	(Lcd_Chr_Cp@valor_palabra+1)^0,c
  2779  00129C                     
  2780                           ;./Lcd.h: 101:     set_valor((valor_palabra>>4));
  2781  00129C  C009  F005         	movff	Lcd_Chr_Cp@valor_palabra,??_Lcd_Chr_Cp
  2782  0012A0  C00A  F006         	movff	Lcd_Chr_Cp@valor_palabra+1,??_Lcd_Chr_Cp+1
  2783  0012A4  0E04               	movlw	4
  2784  0012A6  6E07               	movwf	(??_Lcd_Chr_Cp+2)^0,c
  2785  0012A8                     u945:
  2786  0012A8  3406               	rlcf	(??_Lcd_Chr_Cp+1)^0,w,c
  2787  0012AA  3206               	rrcf	(??_Lcd_Chr_Cp+1)^0,f,c
  2788  0012AC  3205               	rrcf	??_Lcd_Chr_Cp^0,f,c
  2789  0012AE  2E07               	decfsz	(??_Lcd_Chr_Cp+2)^0,f,c
  2790  0012B0  EF54  F009         	goto	u945
  2791  0012B4  C005  F001         	movff	??_Lcd_Chr_Cp,set_valor@valor_comando
  2792  0012B8  C006  F002         	movff	??_Lcd_Chr_Cp+1,set_valor@valor_comando+1
  2793  0012BC  EC80  F009         	call	_set_valor	;wreg free
  2794  0012C0                     
  2795                           ;./Lcd.h: 102:     valor_palabra=(mensaje & 0b00001000)|(mensaje & 0b00000100)|(mensaje 
      +                          & 0b00000010)|(mensaje & 0b00000001);
  2796  0012C0  C00B  F005         	movff	Lcd_Chr_Cp@mensaje,??_Lcd_Chr_Cp
  2797  0012C4  0E01               	movlw	1
  2798  0012C6  1605               	andwf	??_Lcd_Chr_Cp^0,f,c
  2799  0012C8  C00B  F006         	movff	Lcd_Chr_Cp@mensaje,??_Lcd_Chr_Cp+1
  2800  0012CC  0E02               	movlw	2
  2801  0012CE  1606               	andwf	(??_Lcd_Chr_Cp+1)^0,f,c
  2802  0012D0  C00B  F007         	movff	Lcd_Chr_Cp@mensaje,??_Lcd_Chr_Cp+2
  2803  0012D4  0E04               	movlw	4
  2804  0012D6  1607               	andwf	(??_Lcd_Chr_Cp+2)^0,f,c
  2805  0012D8  500B               	movf	Lcd_Chr_Cp@mensaje^0,w,c
  2806  0012DA  0B08               	andlw	8
  2807  0012DC  1007               	iorwf	(??_Lcd_Chr_Cp+2)^0,w,c
  2808  0012DE  1006               	iorwf	(??_Lcd_Chr_Cp+1)^0,w,c
  2809  0012E0  1005               	iorwf	??_Lcd_Chr_Cp^0,w,c
  2810  0012E2  6E08               	movwf	(??_Lcd_Chr_Cp+3)^0,c
  2811  0012E4  5008               	movf	(??_Lcd_Chr_Cp+3)^0,w,c
  2812  0012E6  6E09               	movwf	Lcd_Chr_Cp@valor_palabra^0,c
  2813  0012E8  6A0A               	clrf	(Lcd_Chr_Cp@valor_palabra+1)^0,c
  2814                           
  2815                           ;./Lcd.h: 103:     set_valor(valor_palabra);
  2816  0012EA  C009  F001         	movff	Lcd_Chr_Cp@valor_palabra,set_valor@valor_comando
  2817  0012EE  C00A  F002         	movff	Lcd_Chr_Cp@valor_palabra+1,set_valor@valor_comando+1
  2818  0012F2  EC80  F009         	call	_set_valor	;wreg free
  2819  0012F6                     
  2820                           ;./Lcd.h: 104:     _delay((unsigned long)((100)*(4000000L/4000000.0)));
  2821  0012F6  0E21               	movlw	33
  2822  0012F8                     u1037:
  2823  0012F8  2EE8               	decfsz	wreg,f,c
  2824  0012FA  D7FE               	bra	u1037
  2825  0012FC  F000               	nop	
  2826  0012FE  0012               	return		;funcret
  2827  001300                     __end_of_Lcd_Chr_Cp:
  2828                           	opt callstack 0
  2829                           
  2830 ;; *************** function _Lcd_Init *****************
  2831 ;; Defined at:
  2832 ;;		line 74 in file "./Lcd.h"
  2833 ;; Parameters:    Size  Location     Type
  2834 ;;		None
  2835 ;; Auto vars:     Size  Location     Type
  2836 ;;		None
  2837 ;; Return value:  Size  Location     Type
  2838 ;;                  1    wreg      void 
  2839 ;; Registers used:
  2840 ;;		wreg, status,2, status,0, cstack
  2841 ;; Tracked objects:
  2842 ;;		On entry : 0/0
  2843 ;;		On exit  : 0/0
  2844 ;;		Unchanged: 0/0
  2845 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2846 ;;      Params:         0       0       0       0       0       0       0       0       0
  2847 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2848 ;;      Temps:          1       0       0       0       0       0       0       0       0
  2849 ;;      Totals:         1       0       0       0       0       0       0       0       0
  2850 ;;Total ram usage:        1 bytes
  2851 ;; Hardware stack levels used:    1
  2852 ;; Hardware stack levels required when called:    2
  2853 ;; This function calls:
  2854 ;;		_set_valor
  2855 ;; This function is called by:
  2856 ;;		_main
  2857 ;; This function uses a non-reentrant model
  2858 ;;
  2859                           
  2860                           	psect	text17
  2861  001124                     __ptext17:
  2862                           	opt callstack 0
  2863  001124                     _Lcd_Init:
  2864                           	opt callstack 28
  2865  001124                     
  2866                           ;./Lcd.h: 76:     TRISDbits.RD4=TRISDbits.RD5=TRISDbits.RD6=TRISDbits.RD7=TRISDbits.RD1=
      +                          TRISDbits.RD0=0;
  2867  001124  9095               	bcf	149,0,c	;volatile
  2868  001126  9295               	bcf	149,1,c	;volatile
  2869  001128  9E95               	bcf	149,7,c	;volatile
  2870  00112A  9C95               	bcf	149,6,c	;volatile
  2871  00112C  9A95               	bcf	149,5,c	;volatile
  2872  00112E  9895               	bcf	149,4,c	;volatile
  2873                           
  2874                           ;./Lcd.h: 78:     PORTDbits.RD1=PORTDbits.RD0=PORTDbits.RD4=PORTDbits.RD5=PORTDbits.RD6=
      +                          PORTDbits.RD7=0;
  2875  001130  9E83               	bcf	131,7,c	;volatile
  2876  001132  9C83               	bcf	131,6,c	;volatile
  2877  001134  9A83               	bcf	131,5,c	;volatile
  2878  001136  9883               	bcf	131,4,c	;volatile
  2879  001138  9083               	bcf	131,0,c	;volatile
  2880  00113A  9283               	bcf	131,1,c	;volatile
  2881  00113C                     
  2882                           ;./Lcd.h: 79:     _delay((unsigned long)((15)*(4000000L/4000.0)));
  2883  00113C  0E14               	movlw	20
  2884  00113E  6E05               	movwf	??_Lcd_Init^0,c
  2885  001140  0E7A               	movlw	122
  2886  001142                     u1047:
  2887  001142  2EE8               	decfsz	wreg,f,c
  2888  001144  D7FE               	bra	u1047
  2889  001146  2E05               	decfsz	??_Lcd_Init^0,f,c
  2890  001148  D7FC               	bra	u1047
  2891  00114A                     
  2892                           ;./Lcd.h: 82:     set_valor(3);
  2893  00114A  0E00               	movlw	0
  2894  00114C  6E02               	movwf	(set_valor@valor_comando+1)^0,c
  2895  00114E  0E03               	movlw	3
  2896  001150  6E01               	movwf	set_valor@valor_comando^0,c
  2897  001152  EC80  F009         	call	_set_valor	;wreg free
  2898  001156                     
  2899                           ;./Lcd.h: 83:     _delay((unsigned long)((4)*(4000000L/4000.0)));
  2900  001156  0E06               	movlw	6
  2901  001158  6E05               	movwf	??_Lcd_Init^0,c
  2902  00115A  0E30               	movlw	48
  2903  00115C                     u1057:
  2904  00115C  2EE8               	decfsz	wreg,f,c
  2905  00115E  D7FE               	bra	u1057
  2906  001160  2E05               	decfsz	??_Lcd_Init^0,f,c
  2907  001162  D7FC               	bra	u1057
  2908  001164  D000               	nop2	
  2909                           
  2910                           ;./Lcd.h: 84:     set_valor(3);
  2911  001166  0E00               	movlw	0
  2912  001168  6E02               	movwf	(set_valor@valor_comando+1)^0,c
  2913  00116A  0E03               	movlw	3
  2914  00116C  6E01               	movwf	set_valor@valor_comando^0,c
  2915  00116E  EC80  F009         	call	_set_valor	;wreg free
  2916                           
  2917                           ;./Lcd.h: 85:     set_valor(3);
  2918  001172  0E00               	movlw	0
  2919  001174  6E02               	movwf	(set_valor@valor_comando+1)^0,c
  2920  001176  0E03               	movlw	3
  2921  001178  6E01               	movwf	set_valor@valor_comando^0,c
  2922  00117A  EC80  F009         	call	_set_valor	;wreg free
  2923                           
  2924                           ;./Lcd.h: 86:     set_valor(3);
  2925  00117E  0E00               	movlw	0
  2926  001180  6E02               	movwf	(set_valor@valor_comando+1)^0,c
  2927  001182  0E03               	movlw	3
  2928  001184  6E01               	movwf	set_valor@valor_comando^0,c
  2929  001186  EC80  F009         	call	_set_valor	;wreg free
  2930                           
  2931                           ;./Lcd.h: 87:     set_valor(2);
  2932  00118A  0E00               	movlw	0
  2933  00118C  6E02               	movwf	(set_valor@valor_comando+1)^0,c
  2934  00118E  0E02               	movlw	2
  2935  001190  6E01               	movwf	set_valor@valor_comando^0,c
  2936  001192  EC80  F009         	call	_set_valor	;wreg free
  2937                           
  2938                           ;./Lcd.h: 88:     set_valor(2);
  2939  001196  0E00               	movlw	0
  2940  001198  6E02               	movwf	(set_valor@valor_comando+1)^0,c
  2941  00119A  0E02               	movlw	2
  2942  00119C  6E01               	movwf	set_valor@valor_comando^0,c
  2943  00119E  EC80  F009         	call	_set_valor	;wreg free
  2944                           
  2945                           ;./Lcd.h: 89:     set_valor(11);
  2946  0011A2  0E00               	movlw	0
  2947  0011A4  6E02               	movwf	(set_valor@valor_comando+1)^0,c
  2948  0011A6  0E0B               	movlw	11
  2949  0011A8  6E01               	movwf	set_valor@valor_comando^0,c
  2950  0011AA  EC80  F009         	call	_set_valor	;wreg free
  2951                           
  2952                           ;./Lcd.h: 90:     set_valor(0);
  2953  0011AE  0E00               	movlw	0
  2954  0011B0  6E02               	movwf	(set_valor@valor_comando+1)^0,c
  2955  0011B2  0E00               	movlw	0
  2956  0011B4  6E01               	movwf	set_valor@valor_comando^0,c
  2957  0011B6  EC80  F009         	call	_set_valor	;wreg free
  2958                           
  2959                           ;./Lcd.h: 91:     set_valor(15);
  2960  0011BA  0E00               	movlw	0
  2961  0011BC  6E02               	movwf	(set_valor@valor_comando+1)^0,c
  2962  0011BE  0E0F               	movlw	15
  2963  0011C0  6E01               	movwf	set_valor@valor_comando^0,c
  2964  0011C2  EC80  F009         	call	_set_valor	;wreg free
  2965  0011C6                     
  2966                           ;./Lcd.h: 92:     _delay((unsigned long)((20)*(4000000L/4000.0)));
  2967  0011C6  0E1A               	movlw	26
  2968  0011C8  6E05               	movwf	??_Lcd_Init^0,c
  2969  0011CA  0EF8               	movlw	248
  2970  0011CC                     u1067:
  2971  0011CC  2EE8               	decfsz	wreg,f,c
  2972  0011CE  D7FE               	bra	u1067
  2973  0011D0  2E05               	decfsz	??_Lcd_Init^0,f,c
  2974  0011D2  D7FC               	bra	u1067
  2975  0011D4  D000               	nop2	
  2976  0011D6  0012               	return		;funcret
  2977  0011D8                     __end_of_Lcd_Init:
  2978                           	opt callstack 0
  2979                           
  2980 ;; *************** function _set_valor *****************
  2981 ;; Defined at:
  2982 ;;		line 57 in file "./Lcd.h"
  2983 ;; Parameters:    Size  Location     Type
  2984 ;;  valor_comand    2    0[COMRAM] int 
  2985 ;; Auto vars:     Size  Location     Type
  2986 ;;		None
  2987 ;; Return value:  Size  Location     Type
  2988 ;;                  1    wreg      void 
  2989 ;; Registers used:
  2990 ;;		wreg, status,2, status,0, cstack
  2991 ;; Tracked objects:
  2992 ;;		On entry : 0/0
  2993 ;;		On exit  : 0/0
  2994 ;;		Unchanged: 0/0
  2995 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2996 ;;      Params:         2       0       0       0       0       0       0       0       0
  2997 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2998 ;;      Temps:          2       0       0       0       0       0       0       0       0
  2999 ;;      Totals:         4       0       0       0       0       0       0       0       0
  3000 ;;Total ram usage:        4 bytes
  3001 ;; Hardware stack levels used:    1
  3002 ;; Hardware stack levels required when called:    1
  3003 ;; This function calls:
  3004 ;;		_cargar_comando
  3005 ;; This function is called by:
  3006 ;;		_Lcd_Init
  3007 ;;		_Lcd_Chr_Cp
  3008 ;;		_Lcd_Cmd
  3009 ;; This function uses a non-reentrant model
  3010 ;;
  3011                           
  3012                           	psect	text18
  3013  001300                     __ptext18:
  3014                           	opt callstack 0
  3015  001300                     _set_valor:
  3016                           	opt callstack 27
  3017  001300                     
  3018                           ;./Lcd.h: 58:      PORTDbits.RD7= (valor_comando & 0b00001000)>>3;
  3019  001300  C001  F003         	movff	set_valor@valor_comando,??_set_valor
  3020  001304  C002  F004         	movff	set_valor@valor_comando+1,??_set_valor+1
  3021  001308  3404               	rlcf	(??_set_valor+1)^0,w,c
  3022  00130A  3204               	rrcf	(??_set_valor+1)^0,f,c
  3023  00130C  3203               	rrcf	??_set_valor^0,f,c
  3024  00130E  3404               	rlcf	(??_set_valor+1)^0,w,c
  3025  001310  3204               	rrcf	(??_set_valor+1)^0,f,c
  3026  001312  3203               	rrcf	??_set_valor^0,f,c
  3027  001314  3404               	rlcf	(??_set_valor+1)^0,w,c
  3028  001316  3204               	rrcf	(??_set_valor+1)^0,f,c
  3029  001318  3203               	rrcf	??_set_valor^0,f,c
  3030  00131A  0E01               	movlw	1
  3031  00131C  1603               	andwf	??_set_valor^0,f,c
  3032  00131E  3203               	rrcf	??_set_valor^0,f,c
  3033  001320  3203               	rrcf	??_set_valor^0,f,c
  3034  001322  5083               	movf	131,w,c	;volatile
  3035  001324  1803               	xorwf	??_set_valor^0,w,c
  3036  001326  0B7F               	andlw	-129
  3037  001328  1803               	xorwf	??_set_valor^0,w,c
  3038  00132A  6E83               	movwf	131,c	;volatile
  3039                           
  3040                           ;./Lcd.h: 59:      PORTDbits.RD6= (valor_comando & 0b00000100)>>2;
  3041  00132C  C001  F003         	movff	set_valor@valor_comando,??_set_valor
  3042  001330  C002  F004         	movff	set_valor@valor_comando+1,??_set_valor+1
  3043  001334  3404               	rlcf	(??_set_valor+1)^0,w,c
  3044  001336  3204               	rrcf	(??_set_valor+1)^0,f,c
  3045  001338  3203               	rrcf	??_set_valor^0,f,c
  3046  00133A  3404               	rlcf	(??_set_valor+1)^0,w,c
  3047  00133C  3204               	rrcf	(??_set_valor+1)^0,f,c
  3048  00133E  3203               	rrcf	??_set_valor^0,f,c
  3049  001340  0E01               	movlw	1
  3050  001342  1603               	andwf	??_set_valor^0,f,c
  3051  001344  3A03               	swapf	??_set_valor^0,f,c
  3052  001346  4603               	rlncf	??_set_valor^0,f,c
  3053  001348  4603               	rlncf	??_set_valor^0,f,c
  3054  00134A  5083               	movf	131,w,c	;volatile
  3055  00134C  1803               	xorwf	??_set_valor^0,w,c
  3056  00134E  0BBF               	andlw	-65
  3057  001350  1803               	xorwf	??_set_valor^0,w,c
  3058  001352  6E83               	movwf	131,c	;volatile
  3059                           
  3060                           ;./Lcd.h: 60:      PORTDbits.RD5= (valor_comando & 0b00000010)>>1;
  3061  001354  3402               	rlcf	(set_valor@valor_comando+1)^0,w,c
  3062  001356  3002               	rrcf	(set_valor@valor_comando+1)^0,w,c
  3063  001358  6E04               	movwf	(??_set_valor+1)^0,c
  3064  00135A  3001               	rrcf	set_valor@valor_comando^0,w,c
  3065  00135C  6E03               	movwf	??_set_valor^0,c
  3066  00135E  0E01               	movlw	1
  3067  001360  1603               	andwf	??_set_valor^0,f,c
  3068  001362  3A03               	swapf	??_set_valor^0,f,c
  3069  001364  4603               	rlncf	??_set_valor^0,f,c
  3070  001366  5083               	movf	131,w,c	;volatile
  3071  001368  1803               	xorwf	??_set_valor^0,w,c
  3072  00136A  0BDF               	andlw	-33
  3073  00136C  1803               	xorwf	??_set_valor^0,w,c
  3074  00136E  6E83               	movwf	131,c	;volatile
  3075                           
  3076                           ;./Lcd.h: 61:      PORTDbits.RD4= (valor_comando & 0b00000001);
  3077  001370  C001  F003         	movff	set_valor@valor_comando,??_set_valor
  3078  001374  0E01               	movlw	1
  3079  001376  1603               	andwf	??_set_valor^0,f,c
  3080  001378  3A03               	swapf	??_set_valor^0,f,c
  3081  00137A  5083               	movf	131,w,c	;volatile
  3082  00137C  1803               	xorwf	??_set_valor^0,w,c
  3083  00137E  0BEF               	andlw	-17
  3084  001380  1803               	xorwf	??_set_valor^0,w,c
  3085  001382  6E83               	movwf	131,c	;volatile
  3086  001384                     
  3087                           ;./Lcd.h: 62:      cargar_comando();
  3088  001384  EC57  F00B         	call	_cargar_comando	;wreg free
  3089  001388                     
  3090                           ;./Lcd.h: 63:      _delay((unsigned long)((100)*(4000000L/4000000.0)));
  3091  001388  0E21               	movlw	33
  3092  00138A                     u1077:
  3093  00138A  2EE8               	decfsz	wreg,f,c
  3094  00138C  D7FE               	bra	u1077
  3095  00138E  F000               	nop	
  3096  001390  0012               	return		;funcret
  3097  001392                     __end_of_set_valor:
  3098                           	opt callstack 0
  3099                           
  3100 ;; *************** function _cargar_comando *****************
  3101 ;; Defined at:
  3102 ;;		line 67 in file "./Lcd.h"
  3103 ;; Parameters:    Size  Location     Type
  3104 ;;		None
  3105 ;; Auto vars:     Size  Location     Type
  3106 ;;		None
  3107 ;; Return value:  Size  Location     Type
  3108 ;;                  1    wreg      void 
  3109 ;; Registers used:
  3110 ;;		wreg
  3111 ;; Tracked objects:
  3112 ;;		On entry : 0/0
  3113 ;;		On exit  : 0/0
  3114 ;;		Unchanged: 0/0
  3115 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3116 ;;      Params:         0       0       0       0       0       0       0       0       0
  3117 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3118 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3119 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3120 ;;Total ram usage:        0 bytes
  3121 ;; Hardware stack levels used:    1
  3122 ;; This function calls:
  3123 ;;		Nothing
  3124 ;; This function is called by:
  3125 ;;		_set_valor
  3126 ;; This function uses a non-reentrant model
  3127 ;;
  3128                           
  3129                           	psect	text19
  3130  0016AE                     __ptext19:
  3131                           	opt callstack 0
  3132  0016AE                     _cargar_comando:
  3133                           	opt callstack 27
  3134  0016AE                     
  3135                           ;./Lcd.h: 68:     PORTDbits.RD1=1;
  3136  0016AE  8283               	bsf	131,1,c	;volatile
  3137  0016B0                     
  3138                           ;./Lcd.h: 69:      _delay((unsigned long)((10)*(4000000L/4000000.0)));
  3139  0016B0  0E03               	movlw	3
  3140  0016B2                     u1087:
  3141  0016B2  2EE8               	decfsz	wreg,f,c
  3142  0016B4  D7FE               	bra	u1087
  3143  0016B6  F000               	nop	
  3144  0016B8                     
  3145                           ;./Lcd.h: 70:     PORTDbits.RD1=0;
  3146  0016B8  9283               	bcf	131,1,c	;volatile
  3147  0016BA  0012               	return		;funcret
  3148  0016BC                     __end_of_cargar_comando:
  3149                           	opt callstack 0
  3150                           
  3151                           	psect	rparam
  3152  0000                     tosu	equ	0xFFF
  3153                           tosh	equ	0xFFE
  3154                           tosl	equ	0xFFD
  3155                           stkptr	equ	0xFFC
  3156                           pclatu	equ	0xFFB
  3157                           pclath	equ	0xFFA
  3158                           pcl	equ	0xFF9
  3159                           tblptru	equ	0xFF8
  3160                           tblptrh	equ	0xFF7
  3161                           tblptrl	equ	0xFF6
  3162                           tablat	equ	0xFF5
  3163                           prodh	equ	0xFF4
  3164                           prodl	equ	0xFF3
  3165                           indf0	equ	0xFEF
  3166                           postinc0	equ	0xFEE
  3167                           postdec0	equ	0xFED
  3168                           preinc0	equ	0xFEC
  3169                           plusw0	equ	0xFEB
  3170                           fsr0h	equ	0xFEA
  3171                           fsr0l	equ	0xFE9
  3172                           wreg	equ	0xFE8
  3173                           indf1	equ	0xFE7
  3174                           postinc1	equ	0xFE6
  3175                           postdec1	equ	0xFE5
  3176                           preinc1	equ	0xFE4
  3177                           plusw1	equ	0xFE3
  3178                           fsr1h	equ	0xFE2
  3179                           fsr1l	equ	0xFE1
  3180                           bsr	equ	0xFE0
  3181                           indf2	equ	0xFDF
  3182                           postinc2	equ	0xFDE
  3183                           postdec2	equ	0xFDD
  3184                           preinc2	equ	0xFDC
  3185                           plusw2	equ	0xFDB
  3186                           fsr2h	equ	0xFDA
  3187                           fsr2l	equ	0xFD9
  3188                           status	equ	0xFD8


Data Sizes:
    Strings     16
    Constant    0
    Data        0
    BSS         62
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     95      95
    BANK0           160     10      72
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    strlen@s	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    strlen@a	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    sprintf@fmt	PTR const unsigned char  size(2) Largest target is 9
		 -> STR_2(CODE[9]), 

    sprintf@s	PTR unsigned char  size(2) Largest target is 20
		 -> aux(BANK0[20]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    f.buffer	PTR unsigned char  size(2) Largest target is 20
		 -> aux(BANK0[20]), 

    fputs@s	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    fputs@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    S698_IO_FILE$buffer	PTR unsigned char  size(2) Largest target is 20
		 -> aux(BANK0[20]), 

    fputc@fp.buffer	PTR unsigned char  size(2) Largest target is 20
		 -> aux(BANK0[20]), 

    fputc@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    vfprintf@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(BANK0[2]), 

    vfprintf@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    vfprintf@fmt	PTR const unsigned char  size(2) Largest target is 9
		 -> STR_2(CODE[9]), 

    vfprintf@cfmt	PTR unsigned char  size(2) Largest target is 9
		 -> STR_2(CODE[9]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    vfpfcnvrt@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(BANK0[2]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(2) Largest target is 2
		 -> vfprintf@cfmt(COMRAM[2]), 

    dtoa@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    pad@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    pad@buf	PTR unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    Lcd_Out@mensaje	PTR unsigned char  size(2) Largest target is 20
		 -> aux(BANK0[20]), STR_1(CODE[7]), 


Critical Paths under _main in COMRAM

    _main->_sprintf
    _sprintf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_dtoa
    _dtoa->_pad
    _pad->_fputs
    _fputs->_fputc
    _abs->___aomod
    _Lcd_Out->_Lcd_Chr_Cp
    _Lcd_Out->_Lcd_Cmd
    _Lcd_Cmd->_set_valor
    _Lcd_Chr_Cp->_set_valor
    _Lcd_Init->_set_valor

Critical Paths under _main in BANK0

    _main->_sprintf

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0   12434
                                             93 COMRAM     2     2      0
                            _Lcd_Cmd
                           _Lcd_Init
                            _Lcd_Out
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             16    10      6    6456
                                             87 COMRAM     6     0      6
                                              0 BANK0     10    10      0
                           _vfprintf
 ---------------------------------------------------------------------------------
 (2) _vfprintf                                             8     2      6    6105
                                             79 COMRAM     8     2      6
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (3) _vfpfcnvrt                                           42    36      6    5751
                                             63 COMRAM    16    10      6
                               _dtoa
                              _fputc
 ---------------------------------------------------------------------------------
 (4) _dtoa                                                36    26     10    4358
                                             27 COMRAM    36    26     10
                            ___aodiv
                            ___aomod
                                _abs
                                _pad
 ---------------------------------------------------------------------------------
 (5) _pad                                                 11     5      6    2709
                                             16 COMRAM    11     5      6
                              _fputc
                              _fputs
                             _strlen
 ---------------------------------------------------------------------------------
 (6) _strlen                                               4     2      2     166
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (6) _fputs                                                7     3      4    1235
                                              9 COMRAM     7     3      4
                              _fputc
 ---------------------------------------------------------------------------------
 (4) _fputc                                                9     5      4     834
                                              0 COMRAM     9     5      4
                              _putch
 ---------------------------------------------------------------------------------
 (5) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (5) _abs                                                  4     2      2     142
                                             18 COMRAM     4     2      2
                            ___aomod (ARG)
 ---------------------------------------------------------------------------------
 (5) ___aomod                                             18     2     16     448
                                              0 COMRAM    18     2     16
 ---------------------------------------------------------------------------------
 (5) ___aodiv                                             26    10     16     452
                                              0 COMRAM    26    10     16
 ---------------------------------------------------------------------------------
 (1) _Lcd_Out                                              8     2      6    3604
                                             11 COMRAM     8     2      6
                         _Lcd_Chr_Cp
                            _Lcd_Cmd
                         _set_Cursor
 ---------------------------------------------------------------------------------
 (2) _set_Cursor                                           8     4      4     440
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (2) _Lcd_Cmd                                              7     7      0    1298
                                              4 COMRAM     7     7      0
                          _set_valor
 ---------------------------------------------------------------------------------
 (2) _Lcd_Chr_Cp                                           7     7      0    1298
                                              4 COMRAM     7     7      0
                          _set_valor
 ---------------------------------------------------------------------------------
 (1) _Lcd_Init                                             1     1      0    1076
                                              4 COMRAM     1     1      0
                          _set_valor
 ---------------------------------------------------------------------------------
 (3) _set_valor                                            4     2      2    1076
                                              0 COMRAM     4     2      2
                     _cargar_comando
 ---------------------------------------------------------------------------------
 (4) _cargar_comando                                       0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Lcd_Cmd
     _set_valor
       _cargar_comando
   _Lcd_Init
     _set_valor
       _cargar_comando
   _Lcd_Out
     _Lcd_Chr_Cp
       _set_valor
         _cargar_comando
     _Lcd_Cmd
       _set_valor
         _cargar_comando
     _set_Cursor
   _sprintf
     _vfprintf
       _vfpfcnvrt
         _dtoa
           ___aodiv
           ___aomod
           _abs
             ___aomod (ARG)
           _pad
             _fputc
               _putch
             _fputs
               _fputc
                 _putch
             _strlen
         _fputc
           _putch

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      A      48       5       45.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     5F      5F       1      100.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      A7      20        0.0%
DATA                 0      0      A7       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.10 build 88905656 
Symbol Table                                                                                   Sat Apr 25 21:06:34 2020

                     l20 16BA                       l23 11D6                       l17 1390  
                     l26 12FE                       l35 1528                       l29 126A  
                     l54 14A8                       l49 14A0                       l93 10A4  
                     l96 10E6                       l98 1122              __CFG_BORV$3 000000  
           __CFG_CP0$OFF 000000             __CFG_CP1$OFF 000000             __CFG_CP2$OFF 000000  
           __CFG_CP3$OFF 000000                      l104 08B2                      l106 08BA  
                    l131 0CA6                      l124 0AF2                      l137 1582  
                    l138 158A                      l255 0E2E                      l268 0F92  
                    l831 105C                      l816 1658                      l819 1660  
                    l846 15DC                      l839 1620                      l855 1696  
                    l849 16BC             __CFG_CPB$OFF 000000                      u510 0FA6  
                    u511 0FA2                      u520 0FB8                      u600 10F6  
                    u521 0FB4                      u601 10F2                      u610 163C  
                    u530 0FE0             __CFG_CPD$OFF 000000                      u611 1638  
                    u531 0FDC                      u620 0CBA                      u700 0E74  
                    u540 1016                      u621 0CB6                      u701 0E70  
                    u541 1012                      u630 0CEC                      u710 0EB2  
                    u550 1620                      u631 0CE8                      u711 0EAE  
                    u551 161C                      u720 0EDC                      u560 168A  
                    u800 08D4                      u641 0D16                      u721 0ED8  
                    u561 1686                      u801 08D0                      u650 0D3A  
                    u730 0F0A                      u570 106E                      u810 08E2  
                    u651 0D36                      u731 0F06                      u571 106A  
                    u811 08DE                      u660 0D64                      u740 0F52  
                    u580 1090                      u820 0A0A                      u900 0B18  
                    u661 0D60                      u741 0F4E                      u581 108C  
                    u821 0A06                      u901 0B14                      u670 0DA4  
                    u590 10E6                      u830 0A28                      u750 0842  
                    u910 0B60                      u671 0DA0                      u591 10E2  
                    u831 0A24                      u751 083C                      u911 0B5C  
                    u680 0DEE                      u840 0A42                      u760 0844  
                    u920 0B84                      u681 0DEA                      u841 0A3E  
                    u921 0B80                      u690 0E42                      u850 0A5C  
                    u770 085A                      u930 0C28                      u691 0E3E  
                    u851 0A58                      u771 0856                      u931 0C24  
                    u860 0A6C                      u780 088A                      u861 0A68  
                    u781 0886                      u870 0A7E                      u790 08A6  
                    u871 0A7A                      u791 08A2                      u880 0A8E  
                    u960 1582                      u945 12A8                      u881 0A8A  
                    u961 157E                      u970 14F0                      u890 0AA6  
                    u955 1214                      u891 0AA2                      u980 1518  
                    u990 1528                      u991 1524                      u977 14E6  
                    u987 150E             __CFG_BOR$OFF 000000                      _abs 1622  
                    _aux 008A                      _pad 105E                      wreg 000FE8  
         _cargar_comando 16AE             __CFG_FOSC$HS 000000             __CFG_LVP$OFF 000000  
           __CFG_WDT$OFF 000000                     ?_abs 0013                     l1301 0D0C  
                   l1311 0D56                     l1303 0D10                     l1231 0F94  
                   l1321 0DC6                     l1313 0D64                     l1305 0D1C  
                   l1241 1016                     l1233 0FA6                     l1401 08F8  
                   l1323 0DD8                     l1315 0D76                     l1307 0D3A  
                   l1235 0FB8                     l1251 1600                     l1403 08FE  
                   l1411 09F0                     l1501 11DA                     l1317 0DA4  
                   l1309 0D42                     l1325 0DDE                     l1341 0E66  
                   l1333 0E30                     l1237 0FC2                     l1245 15DE  
                   l1253 1662                     l1413 0A0A                     l1421 0A6C  
                   l1405 0980                     l1503 11DE                     l1327 0DEE  
                   l1319 0DC4                     l1351 0ECE                     l1343 0E74  
                   l1335 0E34                     l1239 0FE0                     l1247 15EA  
                   l1255 166E                     l1271 109C                     l1263 105E  
                   l1431 0AB2                     l1423 0A7E                     l1415 0A28  
                   l1407 0986                     l1441 1384                     l1505 1208  
                   l1521 1454                     l1513 1420                     l1329 0E0E  
                   l1353 0EDC                     l1361 0F42                     l1345 0E94  
                   l1337 0E42                     l1249 15FC                     l1257 1672  
                   l1281 110A                     l1273 10B0                     l1265 106E  
                   l1433 0ABA                     l1425 0A8E                     l1417 0A42  
                   l1409 098C                     l1371 16B0                     l1443 1388  
                   l1507 122C                     l1515 1424                     l1291 0CAC  
                   l1363 0F52                     l1355 0F0A                     l1347 0EB2  
                   l1339 0E62                     l1259 168A                     l1275 10C4  
                   l1267 1082                     l1427 0A94                     l1435 0ACA  
                   l1419 0A5C                     l1451 0B26                     l1531 152A  
                   l1373 16B8                     l1541 113C                     l1509 1262  
                   l1621 147A                     l1517 1434                     l1525 1464  
                   l1293 0CBA                     l1365 0F72                     l1357 0F2A  
                   l1349 0EBA                     l1285 1622                     l1277 10C8  
                   l1269 1090                     l1429 0AA6                     l1381 085A  
                   l1461 0BCC                     l1453 0B38                     l1533 1532  
                   l1439 1300                     l1543 114A                     l1519 1444  
                   l1551 14AA                     l1295 0CDA                     l1359 0F3C  
                   l1287 163C                     l1279 10F6                     l1391 08C2  
                   l1383 087A                     l1471 0C4A                     l1455 0B3C  
                   l1447 0AF4                     l1535 1540                     l1369 16AE  
                   l1545 1156                     l1553 14D0                     l1297 0CDE  
                   l1289 0CA8                     l1393 08D4                     l1385 088A  
                   l1377 0812                     l1465 0C04                     l1457 0B60  
                   l1449 0B18                     l1481 0C70                     l1537 1566  
                   l1561 159E                     l1547 11C6                     l1539 1124  
                   l1491 1272                     l1555 14F4                     l1299 0CEC  
                   l1395 08E2                     l1387 088C                     l1379 0832  
                   l1483 0C94                     l1467 0C28                     l1475 0C56  
                   l1459 0B84                     l1563 15A6                     l1493 129C  
                   l1557 14F8                     l1397 08E8                     l1389 08A6  
                   l1477 0C64                     l1469 0C36                     l1565 15AE  
                   l1495 12C0                     l1399 08F0                     l1567 15CA  
                   l1559 158C                     l1591 13A6                     l1583 1392  
                   l1497 12F6                     l1489 126E                     l1593 13C2  
                   l1585 1396                     l1595 13DE                     l1587 139A  
                   l1597 13FA                     l1589 13A0                     l1599 1400  
                   ?_pad 0011                     STR_1 080A                     STR_2 0801  
                   u1017 140A                     u1027 1264                     u1037 12F8  
                   u1047 1142                     u1057 115C                     u1067 11CC  
                   u1077 138A                     u1087 16B2                     abs@a 0013  
                   _dbuf 006A                     _main 1392                     _dtoa 0812  
                   _prec 0064                     _nout 0060                     pad@i 0018  
                   pad@p 0015                     fsr1h 000FE2                     fsr2h 000FDA  
                   indf1 000FE7                     indf2 000FDF                     fsr1l 000FE1  
                   pad@w 001A                     fsr2l 000FD9                     start 0000  
          __CFG_IESO$OFF 000000          __end_of_Lcd_Cmd 126C          __end_of_Lcd_Out 152A  
          __CFG_MCLRE$ON 000000             ___param_bank 000000               _Lcd_Chr_Cp 126C  
                  ??_abs 0015                    ??_pad 0017            __CFG_PLLDIV$1 000000  
         __CFG_CCP2MX$ON 000000          __end_of___aodiv 0E30                    ?_main 0001  
                  ?_dtoa 001C          __end_of___aomod 0F94   __end_of_cargar_comando 16BC  
           vfpfcnvrt@fmt 0042            __CFG_USBDIV$1 000000            __CFG_PWRT$OFF 000000  
          __CFG_WRT0$OFF 000000            __CFG_WRT1$OFF 000000            __CFG_WRT2$OFF 000000  
          __CFG_WRT3$OFF 000000           __CFG_EBTR0$OFF 000000           __CFG_FCMEN$OFF 000000  
         __CFG_EBTR1$OFF 000000           __CFG_EBTR2$OFF 000000           __CFG_EBTR3$OFF 000000  
          __CFG_WRTB$OFF 000000            __CFG_WRTC$OFF 000000            __CFG_WRTD$OFF 000000  
         __CFG_EBTRB$OFF 000000                    _flags 0066                    _fputc 0F94  
                  _fputs 15DE                    pad@fp 0011                    _width 0062  
                  _putch 16BC                    dtoa@d 001E                    dtoa@i 003E  
                  dtoa@n 0036                    dtoa@p 0030                    dtoa@s 0034  
                  dtoa@w 0032                    tablat 000FF5                    status 000FD8  
        __end_of_sprintf 15DE           __CFG_ICPRT$OFF 000000           __CFG_PBADEN$ON 000000  
       __end_of_Lcd_Init 11D8          __initialization 1698             __end_of_main 1420  
           __end_of_dtoa 0AF4                   ??_main 005E                   ??_dtoa 0026  
          __activetblptr 000002          ?_cargar_comando 0001           Lcd_Out@mensaje 0010  
                 _ADCON1 000FC1                   ?_fputc 0001                   ?_fputs 000A  
                 ?_putch 0001                ??_Lcd_Cmd 0005                ??_Lcd_Out 0012  
Lcd_Chr_Cp@valor_palabra 0009           __CFG_XINST$OFF 000000             vfprintf@cfmt 0056  
            ?_Lcd_Chr_Cp 0001                ??___aodiv 0011                ??___aomod 0011  
         __CFG_STVREN$ON 000000                   clear_0 169E                   pad@buf 0013  
                 dtoa@fp 001C                   _strlen 1662   set_valor@valor_comando 0001  
                 fputc@c 0001                   fputs@c 000E                   fputs@i 000F  
                 fputs@s 000A             __mediumconst 0000                   tblptrh 000FF7  
                 tblptrl 000FF6                   tblptru 000FF8                   putch@c 0001  
       __end_of_vfprintf 158C                ??_sprintf 005E               __accesstop 0060  
__end_of__initialization 16A4            ___rparam_used 000001           __pcstackCOMRAM 0001  
          __end_of_fputc 105E            __end_of_fputs 1622            __end_of_putch 16BE  
              ?_Lcd_Init 0001                  ??_fputc 0005                  ??_fputs 000E  
                ??_putch 0001      __size_of_Lcd_Chr_Cp 0094               __pbssBANK0 0060  
                ?_strlen 0001       __size_of_set_valor 0092       __size_of_vfpfcnvrt 01B4  
             ??_Lcd_Init 0005              set_Cursor@x 0003              set_Cursor@y 0001  
        __CFG_VREGEN$OFF 000000                  _Lcd_Cmd 11D8                  _Lcd_Out 14AA  
                __Hparam 0000                  __Lparam 0000                  ___aodiv 0CA8  
                ___aomod 0E30         ??_cargar_comando 0001                ?_vfprintf 0050  
           __psmallconst 0800                  __pcinit 1698                  __ramtop 0800  
                __ptext0 1392                  __ptext1 158C                  __ptext2 152A  
                __ptext3 0AF4                  __ptext4 0812                  __ptext5 105E  
                __ptext6 1662                  __ptext7 15DE                  __ptext8 0F94  
                __ptext9 16BC          __size_of_strlen 0036             __size_of_abs 0040  
           __size_of_pad 00C6                  _sprintf 158C     end_of_initialization 16A4  
                fputc@fp 0003               _set_Cursor 1420            __Lmediumconst 0000  
                fputs@fp 000C        __end_of_set_valor 1392        __end_of_vfpfcnvrt 0CA8  
           ??_Lcd_Chr_Cp 0005                  postdec2 000FDD                  postinc0 000FEE  
                postinc1 000FE6                  postinc2 000FDE               ??_vfprintf 0056  
                strlen@a 0003                  strlen@s 0001                _PORTDbits 000F83  
              _TRISDbits 000F95       __end_of_Lcd_Chr_Cp 1300              vfpfcnvrt@ap 0044  
            vfpfcnvrt@fp 0040              vfpfcnvrt@ll 0048           __end_of_strlen 1698  
    start_initialization 1698              __end_of_abs 1662              __end_of_pad 1124  
      __size_of_Lcd_Init 00B4            Lcd_Out@cursor 0012              ?_set_Cursor 0001  
            vfprintf@fmt 0052         __CFG_LPT1OSC$OFF 000000                 ??_strlen 0003  
          __pcstackBANK0 009E         ___aodiv@dividend 0001                 ?_Lcd_Cmd 0001  
               ?_Lcd_Out 000C                 ?___aodiv 0001                 ?___aomod 0001  
       ___aodiv@quotient 0013        __size_of_vfprintf 0062      __size_of_set_Cursor 008A  
            __smallconst 0800                 ?_sprintf 0058           __size_of_fputc 00CA  
         __size_of_fputs 0044           __size_of_putch 0002                _set_valor 1300  
               Lcd_Out@x 000E         __CFG_WDTPS$32768 000000                 Lcd_Out@y 000C  
              _vfpfcnvrt 0AF4                 _Lcd_Init 1124         __size_of_Lcd_Cmd 0094  
       __size_of_Lcd_Out 0080                 __Hrparam 0000               vfprintf@ap 0054  
               __Lrparam 0000               vfprintf@fp 0050               ?_set_valor 0001  
      Lcd_Chr_Cp@mensaje 000B         __size_of___aodiv 0188         __size_of___aomod 0164  
         Lcd_Cmd@comando 000B               ?_vfpfcnvrt 0040          ___aodiv@divisor 0009  
        ___aodiv@counter 0011               sprintf@fmt 005A                 _dtoa$237 002E  
__size_of_cargar_comando 000E                 __ptext10 1622                 __ptext11 0E30  
               __ptext12 0CA8                 __ptext13 14AA                 __ptext14 1420  
               __ptext15 11D8                 __ptext16 126C                 __ptext17 1124  
               __ptext18 1300                 __ptext19 16AE                 _contador 0068  
       __size_of_sprintf 0052             ??_set_Cursor 0005            __size_of_main 008E  
          __size_of_dtoa 02E2                 _vfprintf 152A         ___aomod@dividend 0001  
  __CFG_CPUDIV$OSC1_PLL2 000000       __end_of_set_Cursor 14AA     Lcd_Cmd@valor_palabra 0009  
              sprintf@ap 00A0              ??_set_valor 0003          ___aomod@divisor 0009  
            ??_vfpfcnvrt 0046          ___aomod@counter 0011                 sprintf@f 00A2  
               sprintf@s 0058           set_Cursor@data 0007             ___aodiv@sign 0012  
           ___aomod@sign 0012  
